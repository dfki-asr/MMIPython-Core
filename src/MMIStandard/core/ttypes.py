#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class MIPAddress(object):
    """
    Attributes:
     - Address
     - Port

    """


    def __init__(self, Address=None, Port=None,):
        self.Address = Address
        self.Port = Port

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.Port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MIPAddress')
        if self.Address is not None:
            oprot.writeFieldBegin('Address', TType.STRING, 1)
            oprot.writeString(self.Address.encode('utf-8') if sys.version_info[0] == 2 else self.Address)
            oprot.writeFieldEnd()
        if self.Port is not None:
            oprot.writeFieldBegin('Port', TType.I32, 2)
            oprot.writeI32(self.Port)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Address is None:
            raise TProtocolException(message='Required field Address is unset!')
        if self.Port is None:
            raise TProtocolException(message='Required field Port is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MBoolResponse(object):
    """
    Attributes:
     - Successful
     - LogData

    """


    def __init__(self, Successful=None, LogData=None,):
        self.Successful = Successful
        self.LogData = LogData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.Successful = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.LogData = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.LogData.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MBoolResponse')
        if self.Successful is not None:
            oprot.writeFieldBegin('Successful', TType.BOOL, 1)
            oprot.writeBool(self.Successful)
            oprot.writeFieldEnd()
        if self.LogData is not None:
            oprot.writeFieldBegin('LogData', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.LogData))
            for iter6 in self.LogData:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Successful is None:
            raise TProtocolException(message='Required field Successful is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MParameter(object):
    """
    Attributes:
     - Name
     - Type
     - Description
     - Required

    """


    def __init__(self, Name=None, Type=None, Description=None, Required=None,):
        self.Name = Name
        self.Type = Type
        self.Description = Description
        self.Required = Required

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.Required = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MParameter')
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 1)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Type is not None:
            oprot.writeFieldBegin('Type', TType.STRING, 2)
            oprot.writeString(self.Type.encode('utf-8') if sys.version_info[0] == 2 else self.Type)
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRING, 3)
            oprot.writeString(self.Description.encode('utf-8') if sys.version_info[0] == 2 else self.Description)
            oprot.writeFieldEnd()
        if self.Required is not None:
            oprot.writeFieldBegin('Required', TType.BOOL, 4)
            oprot.writeBool(self.Required)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Name is None:
            raise TProtocolException(message='Required field Name is unset!')
        if self.Type is None:
            raise TProtocolException(message='Required field Type is unset!')
        if self.Description is None:
            raise TProtocolException(message='Required field Description is unset!')
        if self.Required is None:
            raise TProtocolException(message='Required field Required is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MExecutableDescription(object):
    """
    Attributes:
     - Name
     - ID
     - Language
     - ExecutableName
     - Author
     - Version
     - Dependencies
     - Vendor
     - VendorDomain
     - ServiceUrl
     - UpdateUrl

    """


    def __init__(self, Name=None, ID=None, Language=None, ExecutableName=None, Author=None, Version=None, Dependencies=None, Vendor=None, VendorDomain=None, ServiceUrl=None, UpdateUrl=None,):
        self.Name = Name
        self.ID = ID
        self.Language = Language
        self.ExecutableName = ExecutableName
        self.Author = Author
        self.Version = Version
        self.Dependencies = Dependencies
        self.Vendor = Vendor
        self.VendorDomain = VendorDomain
        self.ServiceUrl = ServiceUrl
        self.UpdateUrl = UpdateUrl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Language = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.ExecutableName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.Author = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.Version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.Dependencies = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.Dependencies.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.Vendor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.VendorDomain = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.ServiceUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.UpdateUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MExecutableDescription')
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 1)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 2)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.Language is not None:
            oprot.writeFieldBegin('Language', TType.STRING, 3)
            oprot.writeString(self.Language.encode('utf-8') if sys.version_info[0] == 2 else self.Language)
            oprot.writeFieldEnd()
        if self.ExecutableName is not None:
            oprot.writeFieldBegin('ExecutableName', TType.STRING, 4)
            oprot.writeString(self.ExecutableName.encode('utf-8') if sys.version_info[0] == 2 else self.ExecutableName)
            oprot.writeFieldEnd()
        if self.Author is not None:
            oprot.writeFieldBegin('Author', TType.STRING, 5)
            oprot.writeString(self.Author.encode('utf-8') if sys.version_info[0] == 2 else self.Author)
            oprot.writeFieldEnd()
        if self.Version is not None:
            oprot.writeFieldBegin('Version', TType.STRING, 6)
            oprot.writeString(self.Version.encode('utf-8') if sys.version_info[0] == 2 else self.Version)
            oprot.writeFieldEnd()
        if self.Dependencies is not None:
            oprot.writeFieldBegin('Dependencies', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.Dependencies))
            for iter13 in self.Dependencies:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Vendor is not None:
            oprot.writeFieldBegin('Vendor', TType.STRING, 8)
            oprot.writeString(self.Vendor.encode('utf-8') if sys.version_info[0] == 2 else self.Vendor)
            oprot.writeFieldEnd()
        if self.VendorDomain is not None:
            oprot.writeFieldBegin('VendorDomain', TType.STRING, 9)
            oprot.writeString(self.VendorDomain.encode('utf-8') if sys.version_info[0] == 2 else self.VendorDomain)
            oprot.writeFieldEnd()
        if self.ServiceUrl is not None:
            oprot.writeFieldBegin('ServiceUrl', TType.STRING, 10)
            oprot.writeString(self.ServiceUrl.encode('utf-8') if sys.version_info[0] == 2 else self.ServiceUrl)
            oprot.writeFieldEnd()
        if self.UpdateUrl is not None:
            oprot.writeFieldBegin('UpdateUrl', TType.STRING, 11)
            oprot.writeString(self.UpdateUrl.encode('utf-8') if sys.version_info[0] == 2 else self.UpdateUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Name is None:
            raise TProtocolException(message='Required field Name is unset!')
        if self.ID is None:
            raise TProtocolException(message='Required field ID is unset!')
        if self.Language is None:
            raise TProtocolException(message='Required field Language is unset!')
        if self.ExecutableName is None:
            raise TProtocolException(message='Required field ExecutableName is unset!')
        if self.Author is None:
            raise TProtocolException(message='Required field Author is unset!')
        if self.Version is None:
            raise TProtocolException(message='Required field Version is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MServiceDescription(object):
    """
    Attributes:
     - Name
     - ID
     - Language
     - Addresses
     - Properties
     - Parameters

    """


    def __init__(self, Name=None, ID=None, Language=None, Addresses=None, Properties=None, Parameters=None,):
        self.Name = Name
        self.ID = ID
        self.Language = Language
        self.Addresses = Addresses
        self.Properties = Properties
        self.Parameters = Parameters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Language = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.Addresses = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = MIPAddress()
                        _elem19.read(iprot)
                        self.Addresses.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.Properties = {}
                    (_ktype21, _vtype22, _size20) = iprot.readMapBegin()
                    for _i24 in range(_size20):
                        _key25 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val26 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.Properties[_key25] = _val26
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.Parameters = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = MParameter()
                        _elem32.read(iprot)
                        self.Parameters.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MServiceDescription')
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 1)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 2)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.Language is not None:
            oprot.writeFieldBegin('Language', TType.STRING, 3)
            oprot.writeString(self.Language.encode('utf-8') if sys.version_info[0] == 2 else self.Language)
            oprot.writeFieldEnd()
        if self.Addresses is not None:
            oprot.writeFieldBegin('Addresses', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.Addresses))
            for iter33 in self.Addresses:
                iter33.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Properties is not None:
            oprot.writeFieldBegin('Properties', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.Properties))
            for kiter34, viter35 in self.Properties.items():
                oprot.writeString(kiter34.encode('utf-8') if sys.version_info[0] == 2 else kiter34)
                oprot.writeString(viter35.encode('utf-8') if sys.version_info[0] == 2 else viter35)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.Parameters is not None:
            oprot.writeFieldBegin('Parameters', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.Parameters))
            for iter36 in self.Parameters:
                iter36.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Name is None:
            raise TProtocolException(message='Required field Name is unset!')
        if self.ID is None:
            raise TProtocolException(message='Required field ID is unset!')
        if self.Language is None:
            raise TProtocolException(message='Required field Language is unset!')
        if self.Addresses is None:
            raise TProtocolException(message='Required field Addresses is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(MIPAddress)
MIPAddress.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Address', 'UTF8', None, ),  # 1
    (2, TType.I32, 'Port', None, None, ),  # 2
)
all_structs.append(MBoolResponse)
MBoolResponse.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'Successful', None, None, ),  # 1
    (2, TType.LIST, 'LogData', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(MParameter)
MParameter.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'Description', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'Required', None, None, ),  # 4
)
all_structs.append(MExecutableDescription)
MExecutableDescription.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ID', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'Language', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'ExecutableName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'Author', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'Version', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'Dependencies', (TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.STRING, 'Vendor', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'VendorDomain', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'ServiceUrl', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'UpdateUrl', 'UTF8', None, ),  # 11
)
all_structs.append(MServiceDescription)
MServiceDescription.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ID', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'Language', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'Addresses', (TType.STRUCT, [MIPAddress, None], False), None, ),  # 4
    (5, TType.MAP, 'Properties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.LIST, 'Parameters', (TType.STRUCT, [MParameter, None], False), None, ),  # 6
)
fix_spec(all_structs)
del all_structs
