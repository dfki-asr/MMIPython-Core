#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import MMIStandard.services.MMIServiceBase
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(MMIStandard.services.MMIServiceBase.Iface):
    def ComputePenetration(self, colliderA, transformA, colliderB, transformB):
        """
        Parameters:
         - colliderA
         - transformA
         - colliderB
         - transformB

        """
        pass

    def CausesCollision(self, colliderA, transformA, colliderB, transformB):
        """
        Parameters:
         - colliderA
         - transformA
         - colliderB
         - transformB

        """
        pass


class Client(MMIStandard.services.MMIServiceBase.Client, Iface):
    def __init__(self, iprot, oprot=None):
        MMIStandard.services.MMIServiceBase.Client.__init__(self, iprot, oprot)

    def ComputePenetration(self, colliderA, transformA, colliderB, transformB):
        """
        Parameters:
         - colliderA
         - transformA
         - colliderB
         - transformB

        """
        self.send_ComputePenetration(colliderA, transformA, colliderB, transformB)
        return self.recv_ComputePenetration()

    def send_ComputePenetration(self, colliderA, transformA, colliderB, transformB):
        self._oprot.writeMessageBegin('ComputePenetration', TMessageType.CALL, self._seqid)
        args = ComputePenetration_args()
        args.colliderA = colliderA
        args.transformA = transformA
        args.colliderB = colliderB
        args.transformB = transformB
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ComputePenetration(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ComputePenetration_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "ComputePenetration failed: unknown result")

    def CausesCollision(self, colliderA, transformA, colliderB, transformB):
        """
        Parameters:
         - colliderA
         - transformA
         - colliderB
         - transformB

        """
        self.send_CausesCollision(colliderA, transformA, colliderB, transformB)
        return self.recv_CausesCollision()

    def send_CausesCollision(self, colliderA, transformA, colliderB, transformB):
        self._oprot.writeMessageBegin('CausesCollision', TMessageType.CALL, self._seqid)
        args = CausesCollision_args()
        args.colliderA = colliderA
        args.transformA = transformA
        args.colliderB = colliderB
        args.transformB = transformB
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_CausesCollision(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = CausesCollision_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "CausesCollision failed: unknown result")


class Processor(MMIStandard.services.MMIServiceBase.Processor, Iface, TProcessor):
    def __init__(self, handler):
        MMIStandard.services.MMIServiceBase.Processor.__init__(self, handler)
        self._processMap["ComputePenetration"] = Processor.process_ComputePenetration
        self._processMap["CausesCollision"] = Processor.process_CausesCollision
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_ComputePenetration(self, seqid, iprot, oprot):
        args = ComputePenetration_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ComputePenetration_result()
        try:
            result.success = self._handler.ComputePenetration(args.colliderA, args.transformA, args.colliderB, args.transformB)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ComputePenetration", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_CausesCollision(self, seqid, iprot, oprot):
        args = CausesCollision_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = CausesCollision_result()
        try:
            result.success = self._handler.CausesCollision(args.colliderA, args.transformA, args.colliderB, args.transformB)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("CausesCollision", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class ComputePenetration_args(object):
    """
    Attributes:
     - colliderA
     - transformA
     - colliderB
     - transformB

    """


    def __init__(self, colliderA=None, transformA=None, colliderB=None, transformB=None,):
        self.colliderA = colliderA
        self.transformA = transformA
        self.colliderB = colliderB
        self.transformB = transformB

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.colliderA = MMIStandard.scene.ttypes.MCollider()
                    self.colliderA.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.transformA = MMIStandard.math.ttypes.MTransform()
                    self.transformA.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.colliderB = MMIStandard.scene.ttypes.MCollider()
                    self.colliderB.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.transformB = MMIStandard.math.ttypes.MTransform()
                    self.transformB.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComputePenetration_args')
        if self.colliderA is not None:
            oprot.writeFieldBegin('colliderA', TType.STRUCT, 1)
            self.colliderA.write(oprot)
            oprot.writeFieldEnd()
        if self.transformA is not None:
            oprot.writeFieldBegin('transformA', TType.STRUCT, 2)
            self.transformA.write(oprot)
            oprot.writeFieldEnd()
        if self.colliderB is not None:
            oprot.writeFieldBegin('colliderB', TType.STRUCT, 3)
            self.colliderB.write(oprot)
            oprot.writeFieldEnd()
        if self.transformB is not None:
            oprot.writeFieldBegin('transformB', TType.STRUCT, 4)
            self.transformB.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComputePenetration_args)
ComputePenetration_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'colliderA', [MMIStandard.scene.ttypes.MCollider, None], None, ),  # 1
    (2, TType.STRUCT, 'transformA', [MMIStandard.math.ttypes.MTransform, None], None, ),  # 2
    (3, TType.STRUCT, 'colliderB', [MMIStandard.scene.ttypes.MCollider, None], None, ),  # 3
    (4, TType.STRUCT, 'transformB', [MMIStandard.math.ttypes.MTransform, None], None, ),  # 4
)


class ComputePenetration_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MMIStandard.math.ttypes.MVector3()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComputePenetration_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComputePenetration_result)
ComputePenetration_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [MMIStandard.math.ttypes.MVector3, None], None, ),  # 0
)


class CausesCollision_args(object):
    """
    Attributes:
     - colliderA
     - transformA
     - colliderB
     - transformB

    """


    def __init__(self, colliderA=None, transformA=None, colliderB=None, transformB=None,):
        self.colliderA = colliderA
        self.transformA = transformA
        self.colliderB = colliderB
        self.transformB = transformB

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.colliderA = MMIStandard.scene.ttypes.MCollider()
                    self.colliderA.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.transformA = MMIStandard.math.ttypes.MTransform()
                    self.transformA.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.colliderB = MMIStandard.scene.ttypes.MCollider()
                    self.colliderB.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.transformB = MMIStandard.math.ttypes.MTransform()
                    self.transformB.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CausesCollision_args')
        if self.colliderA is not None:
            oprot.writeFieldBegin('colliderA', TType.STRUCT, 1)
            self.colliderA.write(oprot)
            oprot.writeFieldEnd()
        if self.transformA is not None:
            oprot.writeFieldBegin('transformA', TType.STRUCT, 2)
            self.transformA.write(oprot)
            oprot.writeFieldEnd()
        if self.colliderB is not None:
            oprot.writeFieldBegin('colliderB', TType.STRUCT, 3)
            self.colliderB.write(oprot)
            oprot.writeFieldEnd()
        if self.transformB is not None:
            oprot.writeFieldBegin('transformB', TType.STRUCT, 4)
            self.transformB.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(CausesCollision_args)
CausesCollision_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'colliderA', [MMIStandard.scene.ttypes.MCollider, None], None, ),  # 1
    (2, TType.STRUCT, 'transformA', [MMIStandard.math.ttypes.MTransform, None], None, ),  # 2
    (3, TType.STRUCT, 'colliderB', [MMIStandard.scene.ttypes.MCollider, None], None, ),  # 3
    (4, TType.STRUCT, 'transformB', [MMIStandard.math.ttypes.MTransform, None], None, ),  # 4
)


class CausesCollision_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CausesCollision_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(CausesCollision_result)
CausesCollision_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)
fix_spec(all_structs)
del all_structs

