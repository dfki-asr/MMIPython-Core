#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from MMIStandard.register import MMIRegisterService
from MMIStandard.register.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('   GetRegisteredAdapters(string sessionID)')
    print('   GetRegisteredServices(string sessionID)')
    print('   GetAvailableMMUs(string sessionID)')
    print('  MBoolResponse RegisterAdapter(MAdapterDescription adapterDescription)')
    print('  MBoolResponse UnregisterAdapter(MAdapterDescription adapterDescription)')
    print('  MBoolResponse RegisterService(MServiceDescription serviceDescription)')
    print('  MBoolResponse UnregisterService(MServiceDescription serviceDescription)')
    print('  string CreateSessionID( properties)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = MMIRegisterService.Client(protocol)
transport.open()

if cmd == 'GetRegisteredAdapters':
    if len(args) != 1:
        print('GetRegisteredAdapters requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetRegisteredAdapters(args[0],))

elif cmd == 'GetRegisteredServices':
    if len(args) != 1:
        print('GetRegisteredServices requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetRegisteredServices(args[0],))

elif cmd == 'GetAvailableMMUs':
    if len(args) != 1:
        print('GetAvailableMMUs requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetAvailableMMUs(args[0],))

elif cmd == 'RegisterAdapter':
    if len(args) != 1:
        print('RegisterAdapter requires 1 args')
        sys.exit(1)
    pp.pprint(client.RegisterAdapter(eval(args[0]),))

elif cmd == 'UnregisterAdapter':
    if len(args) != 1:
        print('UnregisterAdapter requires 1 args')
        sys.exit(1)
    pp.pprint(client.UnregisterAdapter(eval(args[0]),))

elif cmd == 'RegisterService':
    if len(args) != 1:
        print('RegisterService requires 1 args')
        sys.exit(1)
    pp.pprint(client.RegisterService(eval(args[0]),))

elif cmd == 'UnregisterService':
    if len(args) != 1:
        print('UnregisterService requires 1 args')
        sys.exit(1)
    pp.pprint(client.UnregisterService(eval(args[0]),))

elif cmd == 'CreateSessionID':
    if len(args) != 1:
        print('CreateSessionID requires 1 args')
        sys.exit(1)
    pp.pprint(client.CreateSessionID(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
