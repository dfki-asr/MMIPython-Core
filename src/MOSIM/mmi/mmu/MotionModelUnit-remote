#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from MOSIM.mmi.mmu import MotionModelUnit
from MOSIM.mmi.mmu.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  MBoolResponse Initialize(MAvatarDescription avatarDescription,  properties)')
    print('  MBoolResponse AssignInstruction(MInstruction motionInstruction, MSimulationState simulationState)')
    print('  MSimulationResult DoStep(double time, MSimulationState simulationState)')
    print('   GetBoundaryConstraints(MInstruction instruction)')
    print('  MBoolResponse CheckPrerequisites(MInstruction instruction)')
    print('  MBoolResponse Abort(string instructionId)')
    print('  MBoolResponse Dispose( parameters)')
    print('  string CreateCheckpoint()')
    print('  MBoolResponse RestoreCheckpoint(string data)')
    print('   ExecuteFunction(string name,  parameters)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = MotionModelUnit.Client(protocol)
transport.open()

if cmd == 'Initialize':
    if len(args) != 2:
        print('Initialize requires 2 args')
        sys.exit(1)
    pp.pprint(client.Initialize(eval(args[0]), eval(args[1]),))

elif cmd == 'AssignInstruction':
    if len(args) != 2:
        print('AssignInstruction requires 2 args')
        sys.exit(1)
    pp.pprint(client.AssignInstruction(eval(args[0]), eval(args[1]),))

elif cmd == 'DoStep':
    if len(args) != 2:
        print('DoStep requires 2 args')
        sys.exit(1)
    pp.pprint(client.DoStep(eval(args[0]), eval(args[1]),))

elif cmd == 'GetBoundaryConstraints':
    if len(args) != 1:
        print('GetBoundaryConstraints requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetBoundaryConstraints(eval(args[0]),))

elif cmd == 'CheckPrerequisites':
    if len(args) != 1:
        print('CheckPrerequisites requires 1 args')
        sys.exit(1)
    pp.pprint(client.CheckPrerequisites(eval(args[0]),))

elif cmd == 'Abort':
    if len(args) != 1:
        print('Abort requires 1 args')
        sys.exit(1)
    pp.pprint(client.Abort(args[0],))

elif cmd == 'Dispose':
    if len(args) != 1:
        print('Dispose requires 1 args')
        sys.exit(1)
    pp.pprint(client.Dispose(eval(args[0]),))

elif cmd == 'CreateCheckpoint':
    if len(args) != 0:
        print('CreateCheckpoint requires 0 args')
        sys.exit(1)
    pp.pprint(client.CreateCheckpoint())

elif cmd == 'RestoreCheckpoint':
    if len(args) != 1:
        print('RestoreCheckpoint requires 1 args')
        sys.exit(1)
    pp.pprint(client.RestoreCheckpoint(args[0],))

elif cmd == 'ExecuteFunction':
    if len(args) != 2:
        print('ExecuteFunction requires 2 args')
        sys.exit(1)
    pp.pprint(client.ExecuteFunction(args[0], eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
