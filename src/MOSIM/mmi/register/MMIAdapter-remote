#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from MOSIM.mmi.register import MMIAdapter
from MOSIM.mmi.register.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  MBoolResponse Initialize(MAvatarDescription avatarDescription,  properties, string mmuID, string sessionID)')
    print('  MBoolResponse AssignInstruction(MInstruction instruction, MSimulationState simulationState, string mmuID, string sessionID)')
    print('  MSimulationResult DoStep(double time, MSimulationState simulationState, string mmuID, string sessionID)')
    print('   GetBoundaryConstraints(MInstruction instruction, string mmuID, string sessionID)')
    print('  MBoolResponse CheckPrerequisites(MInstruction instruction, string mmuID, string sessionID)')
    print('  MBoolResponse Abort(string instructionID, string mmuID, string sessionID)')
    print('  MBoolResponse Dispose(string mmuID, string sessionID)')
    print('   ExecuteFunction(string name,  parameters, string mmuID, string sessionID)')
    print('   GetStatus()')
    print('  MAdapterDescription GetAdapterDescription()')
    print('  MBoolResponse CreateSession(string sessionID)')
    print('  MBoolResponse CloseSession(string sessionID)')
    print('  MBoolResponse PushScene(MSceneUpdate sceneUpdates, string sessionID)')
    print('   GetLoadableMMUs()')
    print('   GetMMus(string sessionID)')
    print('  MMUDescription GetDescription(string mmuID, string sessionID)')
    print('   GetScene(string sessionID)')
    print('  MSceneUpdate GetSceneChanges(string sessionID)')
    print('   LoadMMUs( mmus, string sessionID)')
    print('  string CreateCheckpoint(string mmuID, string sessionID)')
    print('  MBoolResponse RestoreCheckpoint(string mmuID, string sessionID, string checkpointData)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = MMIAdapter.Client(protocol)
transport.open()

if cmd == 'Initialize':
    if len(args) != 4:
        print('Initialize requires 4 args')
        sys.exit(1)
    pp.pprint(client.Initialize(eval(args[0]), eval(args[1]), args[2], args[3],))

elif cmd == 'AssignInstruction':
    if len(args) != 4:
        print('AssignInstruction requires 4 args')
        sys.exit(1)
    pp.pprint(client.AssignInstruction(eval(args[0]), eval(args[1]), args[2], args[3],))

elif cmd == 'DoStep':
    if len(args) != 4:
        print('DoStep requires 4 args')
        sys.exit(1)
    pp.pprint(client.DoStep(eval(args[0]), eval(args[1]), args[2], args[3],))

elif cmd == 'GetBoundaryConstraints':
    if len(args) != 3:
        print('GetBoundaryConstraints requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetBoundaryConstraints(eval(args[0]), args[1], args[2],))

elif cmd == 'CheckPrerequisites':
    if len(args) != 3:
        print('CheckPrerequisites requires 3 args')
        sys.exit(1)
    pp.pprint(client.CheckPrerequisites(eval(args[0]), args[1], args[2],))

elif cmd == 'Abort':
    if len(args) != 3:
        print('Abort requires 3 args')
        sys.exit(1)
    pp.pprint(client.Abort(args[0], args[1], args[2],))

elif cmd == 'Dispose':
    if len(args) != 2:
        print('Dispose requires 2 args')
        sys.exit(1)
    pp.pprint(client.Dispose(args[0], args[1],))

elif cmd == 'ExecuteFunction':
    if len(args) != 4:
        print('ExecuteFunction requires 4 args')
        sys.exit(1)
    pp.pprint(client.ExecuteFunction(args[0], eval(args[1]), args[2], args[3],))

elif cmd == 'GetStatus':
    if len(args) != 0:
        print('GetStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetStatus())

elif cmd == 'GetAdapterDescription':
    if len(args) != 0:
        print('GetAdapterDescription requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetAdapterDescription())

elif cmd == 'CreateSession':
    if len(args) != 1:
        print('CreateSession requires 1 args')
        sys.exit(1)
    pp.pprint(client.CreateSession(args[0],))

elif cmd == 'CloseSession':
    if len(args) != 1:
        print('CloseSession requires 1 args')
        sys.exit(1)
    pp.pprint(client.CloseSession(args[0],))

elif cmd == 'PushScene':
    if len(args) != 2:
        print('PushScene requires 2 args')
        sys.exit(1)
    pp.pprint(client.PushScene(eval(args[0]), args[1],))

elif cmd == 'GetLoadableMMUs':
    if len(args) != 0:
        print('GetLoadableMMUs requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetLoadableMMUs())

elif cmd == 'GetMMus':
    if len(args) != 1:
        print('GetMMus requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetMMus(args[0],))

elif cmd == 'GetDescription':
    if len(args) != 2:
        print('GetDescription requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetDescription(args[0], args[1],))

elif cmd == 'GetScene':
    if len(args) != 1:
        print('GetScene requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetScene(args[0],))

elif cmd == 'GetSceneChanges':
    if len(args) != 1:
        print('GetSceneChanges requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetSceneChanges(args[0],))

elif cmd == 'LoadMMUs':
    if len(args) != 2:
        print('LoadMMUs requires 2 args')
        sys.exit(1)
    pp.pprint(client.LoadMMUs(eval(args[0]), args[1],))

elif cmd == 'CreateCheckpoint':
    if len(args) != 2:
        print('CreateCheckpoint requires 2 args')
        sys.exit(1)
    pp.pprint(client.CreateCheckpoint(args[0], args[1],))

elif cmd == 'RestoreCheckpoint':
    if len(args) != 3:
        print('RestoreCheckpoint requires 3 args')
        sys.exit(1)
    pp.pprint(client.RestoreCheckpoint(args[0], args[1], args[2],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
