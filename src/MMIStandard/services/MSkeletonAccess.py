#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import MMIStandard.services.MMIServiceBase
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(MMIStandard.services.MMIServiceBase.Iface):
    def InitializeAnthropometry(self, description):
        """
        Parameters:
         - description

        """
        pass

    def GetAvatarDescription(self, avatarID):
        """
        Parameters:
         - avatarID

        """
        pass

    def SetAnimatedJoints(self, avatarID, joints):
        """
        Parameters:
         - avatarID
         - joints

        """
        pass

    def SetChannelData(self, values):
        """
        Parameters:
         - values

        """
        pass

    def GetCurrentGlobalPosture(self, avatarID):
        """
        Parameters:
         - avatarID

        """
        pass

    def GetCurrentLocalPosture(self, avatarID):
        """
        Parameters:
         - avatarID

        """
        pass

    def GetCurrentPostureValues(self, avatarID):
        """
        Parameters:
         - avatarID

        """
        pass

    def GetCurrentPostureValuesPartial(self, avatarID, joints):
        """
        Parameters:
         - avatarID
         - joints

        """
        pass

    def GetCurrentJointPositions(self, avatarID):
        """
        Parameters:
         - avatarID

        """
        pass

    def GetRootPosition(self, avatarID):
        """
        Parameters:
         - avatarID

        """
        pass

    def GetRootRotation(self, avatarID):
        """
        Parameters:
         - avatarID

        """
        pass

    def GetGlobalJointPosition(self, avatarId, joint):
        """
        Parameters:
         - avatarId
         - joint

        """
        pass

    def GetGlobalJointRotation(self, avatarId, joint):
        """
        Parameters:
         - avatarId
         - joint

        """
        pass

    def GetLocalJointPosition(self, avatarId, joint):
        """
        Parameters:
         - avatarId
         - joint

        """
        pass

    def GetLocalJointRotation(self, avatarId, joint):
        """
        Parameters:
         - avatarId
         - joint

        """
        pass

    def SetRootPosition(self, avatarId, position):
        """
        Parameters:
         - avatarId
         - position

        """
        pass

    def SetRootRotation(self, avatarId, rotation):
        """
        Parameters:
         - avatarId
         - rotation

        """
        pass

    def SetGlobalJointPosition(self, avatarId, joint, position):
        """
        Parameters:
         - avatarId
         - joint
         - position

        """
        pass

    def SetGlobalJointRotation(self, avatarId, joint, rotation):
        """
        Parameters:
         - avatarId
         - joint
         - rotation

        """
        pass

    def SetLocalJointPosition(self, avatarId, joint, position):
        """
        Parameters:
         - avatarId
         - joint
         - position

        """
        pass

    def SetLocalJointRotation(self, avatarId, joint, rotation):
        """
        Parameters:
         - avatarId
         - joint
         - rotation

        """
        pass

    def RecomputeCurrentPostureValues(self, avatarId):
        """
        Parameters:
         - avatarId

        """
        pass


class Client(MMIStandard.services.MMIServiceBase.Client, Iface):
    def __init__(self, iprot, oprot=None):
        MMIStandard.services.MMIServiceBase.Client.__init__(self, iprot, oprot)

    def InitializeAnthropometry(self, description):
        """
        Parameters:
         - description

        """
        self.send_InitializeAnthropometry(description)
        self.recv_InitializeAnthropometry()

    def send_InitializeAnthropometry(self, description):
        self._oprot.writeMessageBegin('InitializeAnthropometry', TMessageType.CALL, self._seqid)
        args = InitializeAnthropometry_args()
        args.description = description
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_InitializeAnthropometry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = InitializeAnthropometry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def GetAvatarDescription(self, avatarID):
        """
        Parameters:
         - avatarID

        """
        self.send_GetAvatarDescription(avatarID)
        return self.recv_GetAvatarDescription()

    def send_GetAvatarDescription(self, avatarID):
        self._oprot.writeMessageBegin('GetAvatarDescription', TMessageType.CALL, self._seqid)
        args = GetAvatarDescription_args()
        args.avatarID = avatarID
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetAvatarDescription(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetAvatarDescription_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetAvatarDescription failed: unknown result")

    def SetAnimatedJoints(self, avatarID, joints):
        """
        Parameters:
         - avatarID
         - joints

        """
        self.send_SetAnimatedJoints(avatarID, joints)
        self.recv_SetAnimatedJoints()

    def send_SetAnimatedJoints(self, avatarID, joints):
        self._oprot.writeMessageBegin('SetAnimatedJoints', TMessageType.CALL, self._seqid)
        args = SetAnimatedJoints_args()
        args.avatarID = avatarID
        args.joints = joints
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_SetAnimatedJoints(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = SetAnimatedJoints_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def SetChannelData(self, values):
        """
        Parameters:
         - values

        """
        self.send_SetChannelData(values)
        self.recv_SetChannelData()

    def send_SetChannelData(self, values):
        self._oprot.writeMessageBegin('SetChannelData', TMessageType.CALL, self._seqid)
        args = SetChannelData_args()
        args.values = values
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_SetChannelData(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = SetChannelData_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def GetCurrentGlobalPosture(self, avatarID):
        """
        Parameters:
         - avatarID

        """
        self.send_GetCurrentGlobalPosture(avatarID)
        return self.recv_GetCurrentGlobalPosture()

    def send_GetCurrentGlobalPosture(self, avatarID):
        self._oprot.writeMessageBegin('GetCurrentGlobalPosture', TMessageType.CALL, self._seqid)
        args = GetCurrentGlobalPosture_args()
        args.avatarID = avatarID
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetCurrentGlobalPosture(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetCurrentGlobalPosture_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetCurrentGlobalPosture failed: unknown result")

    def GetCurrentLocalPosture(self, avatarID):
        """
        Parameters:
         - avatarID

        """
        self.send_GetCurrentLocalPosture(avatarID)
        return self.recv_GetCurrentLocalPosture()

    def send_GetCurrentLocalPosture(self, avatarID):
        self._oprot.writeMessageBegin('GetCurrentLocalPosture', TMessageType.CALL, self._seqid)
        args = GetCurrentLocalPosture_args()
        args.avatarID = avatarID
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetCurrentLocalPosture(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetCurrentLocalPosture_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetCurrentLocalPosture failed: unknown result")

    def GetCurrentPostureValues(self, avatarID):
        """
        Parameters:
         - avatarID

        """
        self.send_GetCurrentPostureValues(avatarID)
        return self.recv_GetCurrentPostureValues()

    def send_GetCurrentPostureValues(self, avatarID):
        self._oprot.writeMessageBegin('GetCurrentPostureValues', TMessageType.CALL, self._seqid)
        args = GetCurrentPostureValues_args()
        args.avatarID = avatarID
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetCurrentPostureValues(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetCurrentPostureValues_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetCurrentPostureValues failed: unknown result")

    def GetCurrentPostureValuesPartial(self, avatarID, joints):
        """
        Parameters:
         - avatarID
         - joints

        """
        self.send_GetCurrentPostureValuesPartial(avatarID, joints)
        return self.recv_GetCurrentPostureValuesPartial()

    def send_GetCurrentPostureValuesPartial(self, avatarID, joints):
        self._oprot.writeMessageBegin('GetCurrentPostureValuesPartial', TMessageType.CALL, self._seqid)
        args = GetCurrentPostureValuesPartial_args()
        args.avatarID = avatarID
        args.joints = joints
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetCurrentPostureValuesPartial(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetCurrentPostureValuesPartial_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetCurrentPostureValuesPartial failed: unknown result")

    def GetCurrentJointPositions(self, avatarID):
        """
        Parameters:
         - avatarID

        """
        self.send_GetCurrentJointPositions(avatarID)
        return self.recv_GetCurrentJointPositions()

    def send_GetCurrentJointPositions(self, avatarID):
        self._oprot.writeMessageBegin('GetCurrentJointPositions', TMessageType.CALL, self._seqid)
        args = GetCurrentJointPositions_args()
        args.avatarID = avatarID
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetCurrentJointPositions(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetCurrentJointPositions_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetCurrentJointPositions failed: unknown result")

    def GetRootPosition(self, avatarID):
        """
        Parameters:
         - avatarID

        """
        self.send_GetRootPosition(avatarID)
        return self.recv_GetRootPosition()

    def send_GetRootPosition(self, avatarID):
        self._oprot.writeMessageBegin('GetRootPosition', TMessageType.CALL, self._seqid)
        args = GetRootPosition_args()
        args.avatarID = avatarID
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetRootPosition(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetRootPosition_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetRootPosition failed: unknown result")

    def GetRootRotation(self, avatarID):
        """
        Parameters:
         - avatarID

        """
        self.send_GetRootRotation(avatarID)
        return self.recv_GetRootRotation()

    def send_GetRootRotation(self, avatarID):
        self._oprot.writeMessageBegin('GetRootRotation', TMessageType.CALL, self._seqid)
        args = GetRootRotation_args()
        args.avatarID = avatarID
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetRootRotation(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetRootRotation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetRootRotation failed: unknown result")

    def GetGlobalJointPosition(self, avatarId, joint):
        """
        Parameters:
         - avatarId
         - joint

        """
        self.send_GetGlobalJointPosition(avatarId, joint)
        return self.recv_GetGlobalJointPosition()

    def send_GetGlobalJointPosition(self, avatarId, joint):
        self._oprot.writeMessageBegin('GetGlobalJointPosition', TMessageType.CALL, self._seqid)
        args = GetGlobalJointPosition_args()
        args.avatarId = avatarId
        args.joint = joint
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetGlobalJointPosition(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetGlobalJointPosition_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetGlobalJointPosition failed: unknown result")

    def GetGlobalJointRotation(self, avatarId, joint):
        """
        Parameters:
         - avatarId
         - joint

        """
        self.send_GetGlobalJointRotation(avatarId, joint)
        return self.recv_GetGlobalJointRotation()

    def send_GetGlobalJointRotation(self, avatarId, joint):
        self._oprot.writeMessageBegin('GetGlobalJointRotation', TMessageType.CALL, self._seqid)
        args = GetGlobalJointRotation_args()
        args.avatarId = avatarId
        args.joint = joint
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetGlobalJointRotation(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetGlobalJointRotation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetGlobalJointRotation failed: unknown result")

    def GetLocalJointPosition(self, avatarId, joint):
        """
        Parameters:
         - avatarId
         - joint

        """
        self.send_GetLocalJointPosition(avatarId, joint)
        return self.recv_GetLocalJointPosition()

    def send_GetLocalJointPosition(self, avatarId, joint):
        self._oprot.writeMessageBegin('GetLocalJointPosition', TMessageType.CALL, self._seqid)
        args = GetLocalJointPosition_args()
        args.avatarId = avatarId
        args.joint = joint
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetLocalJointPosition(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetLocalJointPosition_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetLocalJointPosition failed: unknown result")

    def GetLocalJointRotation(self, avatarId, joint):
        """
        Parameters:
         - avatarId
         - joint

        """
        self.send_GetLocalJointRotation(avatarId, joint)
        return self.recv_GetLocalJointRotation()

    def send_GetLocalJointRotation(self, avatarId, joint):
        self._oprot.writeMessageBegin('GetLocalJointRotation', TMessageType.CALL, self._seqid)
        args = GetLocalJointRotation_args()
        args.avatarId = avatarId
        args.joint = joint
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetLocalJointRotation(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetLocalJointRotation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetLocalJointRotation failed: unknown result")

    def SetRootPosition(self, avatarId, position):
        """
        Parameters:
         - avatarId
         - position

        """
        self.send_SetRootPosition(avatarId, position)
        self.recv_SetRootPosition()

    def send_SetRootPosition(self, avatarId, position):
        self._oprot.writeMessageBegin('SetRootPosition', TMessageType.CALL, self._seqid)
        args = SetRootPosition_args()
        args.avatarId = avatarId
        args.position = position
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_SetRootPosition(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = SetRootPosition_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def SetRootRotation(self, avatarId, rotation):
        """
        Parameters:
         - avatarId
         - rotation

        """
        self.send_SetRootRotation(avatarId, rotation)
        self.recv_SetRootRotation()

    def send_SetRootRotation(self, avatarId, rotation):
        self._oprot.writeMessageBegin('SetRootRotation', TMessageType.CALL, self._seqid)
        args = SetRootRotation_args()
        args.avatarId = avatarId
        args.rotation = rotation
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_SetRootRotation(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = SetRootRotation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def SetGlobalJointPosition(self, avatarId, joint, position):
        """
        Parameters:
         - avatarId
         - joint
         - position

        """
        self.send_SetGlobalJointPosition(avatarId, joint, position)
        self.recv_SetGlobalJointPosition()

    def send_SetGlobalJointPosition(self, avatarId, joint, position):
        self._oprot.writeMessageBegin('SetGlobalJointPosition', TMessageType.CALL, self._seqid)
        args = SetGlobalJointPosition_args()
        args.avatarId = avatarId
        args.joint = joint
        args.position = position
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_SetGlobalJointPosition(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = SetGlobalJointPosition_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def SetGlobalJointRotation(self, avatarId, joint, rotation):
        """
        Parameters:
         - avatarId
         - joint
         - rotation

        """
        self.send_SetGlobalJointRotation(avatarId, joint, rotation)
        self.recv_SetGlobalJointRotation()

    def send_SetGlobalJointRotation(self, avatarId, joint, rotation):
        self._oprot.writeMessageBegin('SetGlobalJointRotation', TMessageType.CALL, self._seqid)
        args = SetGlobalJointRotation_args()
        args.avatarId = avatarId
        args.joint = joint
        args.rotation = rotation
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_SetGlobalJointRotation(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = SetGlobalJointRotation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def SetLocalJointPosition(self, avatarId, joint, position):
        """
        Parameters:
         - avatarId
         - joint
         - position

        """
        self.send_SetLocalJointPosition(avatarId, joint, position)
        self.recv_SetLocalJointPosition()

    def send_SetLocalJointPosition(self, avatarId, joint, position):
        self._oprot.writeMessageBegin('SetLocalJointPosition', TMessageType.CALL, self._seqid)
        args = SetLocalJointPosition_args()
        args.avatarId = avatarId
        args.joint = joint
        args.position = position
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_SetLocalJointPosition(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = SetLocalJointPosition_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def SetLocalJointRotation(self, avatarId, joint, rotation):
        """
        Parameters:
         - avatarId
         - joint
         - rotation

        """
        self.send_SetLocalJointRotation(avatarId, joint, rotation)
        self.recv_SetLocalJointRotation()

    def send_SetLocalJointRotation(self, avatarId, joint, rotation):
        self._oprot.writeMessageBegin('SetLocalJointRotation', TMessageType.CALL, self._seqid)
        args = SetLocalJointRotation_args()
        args.avatarId = avatarId
        args.joint = joint
        args.rotation = rotation
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_SetLocalJointRotation(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = SetLocalJointRotation_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def RecomputeCurrentPostureValues(self, avatarId):
        """
        Parameters:
         - avatarId

        """
        self.send_RecomputeCurrentPostureValues(avatarId)
        return self.recv_RecomputeCurrentPostureValues()

    def send_RecomputeCurrentPostureValues(self, avatarId):
        self._oprot.writeMessageBegin('RecomputeCurrentPostureValues', TMessageType.CALL, self._seqid)
        args = RecomputeCurrentPostureValues_args()
        args.avatarId = avatarId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_RecomputeCurrentPostureValues(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = RecomputeCurrentPostureValues_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "RecomputeCurrentPostureValues failed: unknown result")


class Processor(MMIStandard.services.MMIServiceBase.Processor, Iface, TProcessor):
    def __init__(self, handler):
        MMIStandard.services.MMIServiceBase.Processor.__init__(self, handler)
        self._processMap["InitializeAnthropometry"] = Processor.process_InitializeAnthropometry
        self._processMap["GetAvatarDescription"] = Processor.process_GetAvatarDescription
        self._processMap["SetAnimatedJoints"] = Processor.process_SetAnimatedJoints
        self._processMap["SetChannelData"] = Processor.process_SetChannelData
        self._processMap["GetCurrentGlobalPosture"] = Processor.process_GetCurrentGlobalPosture
        self._processMap["GetCurrentLocalPosture"] = Processor.process_GetCurrentLocalPosture
        self._processMap["GetCurrentPostureValues"] = Processor.process_GetCurrentPostureValues
        self._processMap["GetCurrentPostureValuesPartial"] = Processor.process_GetCurrentPostureValuesPartial
        self._processMap["GetCurrentJointPositions"] = Processor.process_GetCurrentJointPositions
        self._processMap["GetRootPosition"] = Processor.process_GetRootPosition
        self._processMap["GetRootRotation"] = Processor.process_GetRootRotation
        self._processMap["GetGlobalJointPosition"] = Processor.process_GetGlobalJointPosition
        self._processMap["GetGlobalJointRotation"] = Processor.process_GetGlobalJointRotation
        self._processMap["GetLocalJointPosition"] = Processor.process_GetLocalJointPosition
        self._processMap["GetLocalJointRotation"] = Processor.process_GetLocalJointRotation
        self._processMap["SetRootPosition"] = Processor.process_SetRootPosition
        self._processMap["SetRootRotation"] = Processor.process_SetRootRotation
        self._processMap["SetGlobalJointPosition"] = Processor.process_SetGlobalJointPosition
        self._processMap["SetGlobalJointRotation"] = Processor.process_SetGlobalJointRotation
        self._processMap["SetLocalJointPosition"] = Processor.process_SetLocalJointPosition
        self._processMap["SetLocalJointRotation"] = Processor.process_SetLocalJointRotation
        self._processMap["RecomputeCurrentPostureValues"] = Processor.process_RecomputeCurrentPostureValues
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_InitializeAnthropometry(self, seqid, iprot, oprot):
        args = InitializeAnthropometry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = InitializeAnthropometry_result()
        try:
            self._handler.InitializeAnthropometry(args.description)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("InitializeAnthropometry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetAvatarDescription(self, seqid, iprot, oprot):
        args = GetAvatarDescription_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetAvatarDescription_result()
        try:
            result.success = self._handler.GetAvatarDescription(args.avatarID)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetAvatarDescription", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_SetAnimatedJoints(self, seqid, iprot, oprot):
        args = SetAnimatedJoints_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = SetAnimatedJoints_result()
        try:
            self._handler.SetAnimatedJoints(args.avatarID, args.joints)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("SetAnimatedJoints", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_SetChannelData(self, seqid, iprot, oprot):
        args = SetChannelData_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = SetChannelData_result()
        try:
            self._handler.SetChannelData(args.values)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("SetChannelData", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetCurrentGlobalPosture(self, seqid, iprot, oprot):
        args = GetCurrentGlobalPosture_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetCurrentGlobalPosture_result()
        try:
            result.success = self._handler.GetCurrentGlobalPosture(args.avatarID)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetCurrentGlobalPosture", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetCurrentLocalPosture(self, seqid, iprot, oprot):
        args = GetCurrentLocalPosture_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetCurrentLocalPosture_result()
        try:
            result.success = self._handler.GetCurrentLocalPosture(args.avatarID)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetCurrentLocalPosture", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetCurrentPostureValues(self, seqid, iprot, oprot):
        args = GetCurrentPostureValues_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetCurrentPostureValues_result()
        try:
            result.success = self._handler.GetCurrentPostureValues(args.avatarID)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetCurrentPostureValues", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetCurrentPostureValuesPartial(self, seqid, iprot, oprot):
        args = GetCurrentPostureValuesPartial_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetCurrentPostureValuesPartial_result()
        try:
            result.success = self._handler.GetCurrentPostureValuesPartial(args.avatarID, args.joints)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetCurrentPostureValuesPartial", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetCurrentJointPositions(self, seqid, iprot, oprot):
        args = GetCurrentJointPositions_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetCurrentJointPositions_result()
        try:
            result.success = self._handler.GetCurrentJointPositions(args.avatarID)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetCurrentJointPositions", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetRootPosition(self, seqid, iprot, oprot):
        args = GetRootPosition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetRootPosition_result()
        try:
            result.success = self._handler.GetRootPosition(args.avatarID)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetRootPosition", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetRootRotation(self, seqid, iprot, oprot):
        args = GetRootRotation_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetRootRotation_result()
        try:
            result.success = self._handler.GetRootRotation(args.avatarID)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetRootRotation", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetGlobalJointPosition(self, seqid, iprot, oprot):
        args = GetGlobalJointPosition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetGlobalJointPosition_result()
        try:
            result.success = self._handler.GetGlobalJointPosition(args.avatarId, args.joint)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetGlobalJointPosition", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetGlobalJointRotation(self, seqid, iprot, oprot):
        args = GetGlobalJointRotation_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetGlobalJointRotation_result()
        try:
            result.success = self._handler.GetGlobalJointRotation(args.avatarId, args.joint)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetGlobalJointRotation", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetLocalJointPosition(self, seqid, iprot, oprot):
        args = GetLocalJointPosition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetLocalJointPosition_result()
        try:
            result.success = self._handler.GetLocalJointPosition(args.avatarId, args.joint)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetLocalJointPosition", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetLocalJointRotation(self, seqid, iprot, oprot):
        args = GetLocalJointRotation_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetLocalJointRotation_result()
        try:
            result.success = self._handler.GetLocalJointRotation(args.avatarId, args.joint)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetLocalJointRotation", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_SetRootPosition(self, seqid, iprot, oprot):
        args = SetRootPosition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = SetRootPosition_result()
        try:
            self._handler.SetRootPosition(args.avatarId, args.position)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("SetRootPosition", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_SetRootRotation(self, seqid, iprot, oprot):
        args = SetRootRotation_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = SetRootRotation_result()
        try:
            self._handler.SetRootRotation(args.avatarId, args.rotation)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("SetRootRotation", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_SetGlobalJointPosition(self, seqid, iprot, oprot):
        args = SetGlobalJointPosition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = SetGlobalJointPosition_result()
        try:
            self._handler.SetGlobalJointPosition(args.avatarId, args.joint, args.position)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("SetGlobalJointPosition", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_SetGlobalJointRotation(self, seqid, iprot, oprot):
        args = SetGlobalJointRotation_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = SetGlobalJointRotation_result()
        try:
            self._handler.SetGlobalJointRotation(args.avatarId, args.joint, args.rotation)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("SetGlobalJointRotation", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_SetLocalJointPosition(self, seqid, iprot, oprot):
        args = SetLocalJointPosition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = SetLocalJointPosition_result()
        try:
            self._handler.SetLocalJointPosition(args.avatarId, args.joint, args.position)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("SetLocalJointPosition", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_SetLocalJointRotation(self, seqid, iprot, oprot):
        args = SetLocalJointRotation_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = SetLocalJointRotation_result()
        try:
            self._handler.SetLocalJointRotation(args.avatarId, args.joint, args.rotation)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("SetLocalJointRotation", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_RecomputeCurrentPostureValues(self, seqid, iprot, oprot):
        args = RecomputeCurrentPostureValues_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = RecomputeCurrentPostureValues_result()
        try:
            result.success = self._handler.RecomputeCurrentPostureValues(args.avatarId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("RecomputeCurrentPostureValues", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class InitializeAnthropometry_args(object):
    """
    Attributes:
     - description

    """


    def __init__(self, description=None,):
        self.description = description

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.description = MMIStandard.avatar.ttypes.MAvatarDescription()
                    self.description.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InitializeAnthropometry_args')
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRUCT, 1)
            self.description.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(InitializeAnthropometry_args)
InitializeAnthropometry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'description', [MMIStandard.avatar.ttypes.MAvatarDescription, None], None, ),  # 1
)


class InitializeAnthropometry_result(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InitializeAnthropometry_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(InitializeAnthropometry_result)
InitializeAnthropometry_result.thrift_spec = (
)


class GetAvatarDescription_args(object):
    """
    Attributes:
     - avatarID

    """


    def __init__(self, avatarID=None,):
        self.avatarID = avatarID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetAvatarDescription_args')
        if self.avatarID is not None:
            oprot.writeFieldBegin('avatarID', TType.STRING, 1)
            oprot.writeString(self.avatarID.encode('utf-8') if sys.version_info[0] == 2 else self.avatarID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetAvatarDescription_args)
GetAvatarDescription_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarID', 'UTF8', None, ),  # 1
)


class GetAvatarDescription_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MMIStandard.avatar.ttypes.MAvatarDescription()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetAvatarDescription_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetAvatarDescription_result)
GetAvatarDescription_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [MMIStandard.avatar.ttypes.MAvatarDescription, None], None, ),  # 0
)


class SetAnimatedJoints_args(object):
    """
    Attributes:
     - avatarID
     - joints

    """


    def __init__(self, avatarID=None, joints=None,):
        self.avatarID = avatarID
        self.joints = joints

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.joints = []
                    (_etype290, _size287) = iprot.readListBegin()
                    for _i291 in range(_size287):
                        _elem292 = iprot.readI32()
                        self.joints.append(_elem292)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetAnimatedJoints_args')
        if self.avatarID is not None:
            oprot.writeFieldBegin('avatarID', TType.STRING, 1)
            oprot.writeString(self.avatarID.encode('utf-8') if sys.version_info[0] == 2 else self.avatarID)
            oprot.writeFieldEnd()
        if self.joints is not None:
            oprot.writeFieldBegin('joints', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.joints))
            for iter293 in self.joints:
                oprot.writeI32(iter293)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetAnimatedJoints_args)
SetAnimatedJoints_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarID', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'joints', (TType.I32, None, False), None, ),  # 2
)


class SetAnimatedJoints_result(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetAnimatedJoints_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetAnimatedJoints_result)
SetAnimatedJoints_result.thrift_spec = (
)


class SetChannelData_args(object):
    """
    Attributes:
     - values

    """


    def __init__(self, values=None,):
        self.values = values

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.values = MMIStandard.avatar.ttypes.MAvatarPostureValues()
                    self.values.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetChannelData_args')
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.STRUCT, 1)
            self.values.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetChannelData_args)
SetChannelData_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'values', [MMIStandard.avatar.ttypes.MAvatarPostureValues, None], None, ),  # 1
)


class SetChannelData_result(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetChannelData_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetChannelData_result)
SetChannelData_result.thrift_spec = (
)


class GetCurrentGlobalPosture_args(object):
    """
    Attributes:
     - avatarID

    """


    def __init__(self, avatarID=None,):
        self.avatarID = avatarID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetCurrentGlobalPosture_args')
        if self.avatarID is not None:
            oprot.writeFieldBegin('avatarID', TType.STRING, 1)
            oprot.writeString(self.avatarID.encode('utf-8') if sys.version_info[0] == 2 else self.avatarID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetCurrentGlobalPosture_args)
GetCurrentGlobalPosture_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarID', 'UTF8', None, ),  # 1
)


class GetCurrentGlobalPosture_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MMIStandard.avatar.ttypes.MAvatarPosture()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetCurrentGlobalPosture_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetCurrentGlobalPosture_result)
GetCurrentGlobalPosture_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [MMIStandard.avatar.ttypes.MAvatarPosture, None], None, ),  # 0
)


class GetCurrentLocalPosture_args(object):
    """
    Attributes:
     - avatarID

    """


    def __init__(self, avatarID=None,):
        self.avatarID = avatarID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetCurrentLocalPosture_args')
        if self.avatarID is not None:
            oprot.writeFieldBegin('avatarID', TType.STRING, 1)
            oprot.writeString(self.avatarID.encode('utf-8') if sys.version_info[0] == 2 else self.avatarID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetCurrentLocalPosture_args)
GetCurrentLocalPosture_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarID', 'UTF8', None, ),  # 1
)


class GetCurrentLocalPosture_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MMIStandard.avatar.ttypes.MAvatarPosture()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetCurrentLocalPosture_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetCurrentLocalPosture_result)
GetCurrentLocalPosture_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [MMIStandard.avatar.ttypes.MAvatarPosture, None], None, ),  # 0
)


class GetCurrentPostureValues_args(object):
    """
    Attributes:
     - avatarID

    """


    def __init__(self, avatarID=None,):
        self.avatarID = avatarID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetCurrentPostureValues_args')
        if self.avatarID is not None:
            oprot.writeFieldBegin('avatarID', TType.STRING, 1)
            oprot.writeString(self.avatarID.encode('utf-8') if sys.version_info[0] == 2 else self.avatarID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetCurrentPostureValues_args)
GetCurrentPostureValues_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarID', 'UTF8', None, ),  # 1
)


class GetCurrentPostureValues_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MMIStandard.avatar.ttypes.MAvatarPostureValues()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetCurrentPostureValues_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetCurrentPostureValues_result)
GetCurrentPostureValues_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [MMIStandard.avatar.ttypes.MAvatarPostureValues, None], None, ),  # 0
)


class GetCurrentPostureValuesPartial_args(object):
    """
    Attributes:
     - avatarID
     - joints

    """


    def __init__(self, avatarID=None, joints=None,):
        self.avatarID = avatarID
        self.joints = joints

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.joints = []
                    (_etype297, _size294) = iprot.readListBegin()
                    for _i298 in range(_size294):
                        _elem299 = iprot.readI32()
                        self.joints.append(_elem299)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetCurrentPostureValuesPartial_args')
        if self.avatarID is not None:
            oprot.writeFieldBegin('avatarID', TType.STRING, 1)
            oprot.writeString(self.avatarID.encode('utf-8') if sys.version_info[0] == 2 else self.avatarID)
            oprot.writeFieldEnd()
        if self.joints is not None:
            oprot.writeFieldBegin('joints', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.joints))
            for iter300 in self.joints:
                oprot.writeI32(iter300)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetCurrentPostureValuesPartial_args)
GetCurrentPostureValuesPartial_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarID', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'joints', (TType.I32, None, False), None, ),  # 2
)


class GetCurrentPostureValuesPartial_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MMIStandard.avatar.ttypes.MAvatarPostureValues()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetCurrentPostureValuesPartial_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetCurrentPostureValuesPartial_result)
GetCurrentPostureValuesPartial_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [MMIStandard.avatar.ttypes.MAvatarPostureValues, None], None, ),  # 0
)


class GetCurrentJointPositions_args(object):
    """
    Attributes:
     - avatarID

    """


    def __init__(self, avatarID=None,):
        self.avatarID = avatarID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetCurrentJointPositions_args')
        if self.avatarID is not None:
            oprot.writeFieldBegin('avatarID', TType.STRING, 1)
            oprot.writeString(self.avatarID.encode('utf-8') if sys.version_info[0] == 2 else self.avatarID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetCurrentJointPositions_args)
GetCurrentJointPositions_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarID', 'UTF8', None, ),  # 1
)


class GetCurrentJointPositions_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype304, _size301) = iprot.readListBegin()
                    for _i305 in range(_size301):
                        _elem306 = MMIStandard.math.ttypes.MVector3()
                        _elem306.read(iprot)
                        self.success.append(_elem306)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetCurrentJointPositions_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter307 in self.success:
                iter307.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetCurrentJointPositions_result)
GetCurrentJointPositions_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [MMIStandard.math.ttypes.MVector3, None], False), None, ),  # 0
)


class GetRootPosition_args(object):
    """
    Attributes:
     - avatarID

    """


    def __init__(self, avatarID=None,):
        self.avatarID = avatarID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetRootPosition_args')
        if self.avatarID is not None:
            oprot.writeFieldBegin('avatarID', TType.STRING, 1)
            oprot.writeString(self.avatarID.encode('utf-8') if sys.version_info[0] == 2 else self.avatarID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetRootPosition_args)
GetRootPosition_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarID', 'UTF8', None, ),  # 1
)


class GetRootPosition_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MMIStandard.math.ttypes.MVector3()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetRootPosition_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetRootPosition_result)
GetRootPosition_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [MMIStandard.math.ttypes.MVector3, None], None, ),  # 0
)


class GetRootRotation_args(object):
    """
    Attributes:
     - avatarID

    """


    def __init__(self, avatarID=None,):
        self.avatarID = avatarID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetRootRotation_args')
        if self.avatarID is not None:
            oprot.writeFieldBegin('avatarID', TType.STRING, 1)
            oprot.writeString(self.avatarID.encode('utf-8') if sys.version_info[0] == 2 else self.avatarID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetRootRotation_args)
GetRootRotation_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarID', 'UTF8', None, ),  # 1
)


class GetRootRotation_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MMIStandard.math.ttypes.MQuaternion()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetRootRotation_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetRootRotation_result)
GetRootRotation_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [MMIStandard.math.ttypes.MQuaternion, None], None, ),  # 0
)


class GetGlobalJointPosition_args(object):
    """
    Attributes:
     - avatarId
     - joint

    """


    def __init__(self, avatarId=None, joint=None,):
        self.avatarId = avatarId
        self.joint = joint

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.joint = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetGlobalJointPosition_args')
        if self.avatarId is not None:
            oprot.writeFieldBegin('avatarId', TType.STRING, 1)
            oprot.writeString(self.avatarId.encode('utf-8') if sys.version_info[0] == 2 else self.avatarId)
            oprot.writeFieldEnd()
        if self.joint is not None:
            oprot.writeFieldBegin('joint', TType.I32, 2)
            oprot.writeI32(self.joint)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetGlobalJointPosition_args)
GetGlobalJointPosition_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'joint', None, None, ),  # 2
)


class GetGlobalJointPosition_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MMIStandard.math.ttypes.MVector3()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetGlobalJointPosition_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetGlobalJointPosition_result)
GetGlobalJointPosition_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [MMIStandard.math.ttypes.MVector3, None], None, ),  # 0
)


class GetGlobalJointRotation_args(object):
    """
    Attributes:
     - avatarId
     - joint

    """


    def __init__(self, avatarId=None, joint=None,):
        self.avatarId = avatarId
        self.joint = joint

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.joint = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetGlobalJointRotation_args')
        if self.avatarId is not None:
            oprot.writeFieldBegin('avatarId', TType.STRING, 1)
            oprot.writeString(self.avatarId.encode('utf-8') if sys.version_info[0] == 2 else self.avatarId)
            oprot.writeFieldEnd()
        if self.joint is not None:
            oprot.writeFieldBegin('joint', TType.I32, 2)
            oprot.writeI32(self.joint)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetGlobalJointRotation_args)
GetGlobalJointRotation_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'joint', None, None, ),  # 2
)


class GetGlobalJointRotation_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MMIStandard.math.ttypes.MQuaternion()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetGlobalJointRotation_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetGlobalJointRotation_result)
GetGlobalJointRotation_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [MMIStandard.math.ttypes.MQuaternion, None], None, ),  # 0
)


class GetLocalJointPosition_args(object):
    """
    Attributes:
     - avatarId
     - joint

    """


    def __init__(self, avatarId=None, joint=None,):
        self.avatarId = avatarId
        self.joint = joint

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.joint = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetLocalJointPosition_args')
        if self.avatarId is not None:
            oprot.writeFieldBegin('avatarId', TType.STRING, 1)
            oprot.writeString(self.avatarId.encode('utf-8') if sys.version_info[0] == 2 else self.avatarId)
            oprot.writeFieldEnd()
        if self.joint is not None:
            oprot.writeFieldBegin('joint', TType.I32, 2)
            oprot.writeI32(self.joint)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetLocalJointPosition_args)
GetLocalJointPosition_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'joint', None, None, ),  # 2
)


class GetLocalJointPosition_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MMIStandard.math.ttypes.MVector3()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetLocalJointPosition_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetLocalJointPosition_result)
GetLocalJointPosition_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [MMIStandard.math.ttypes.MVector3, None], None, ),  # 0
)


class GetLocalJointRotation_args(object):
    """
    Attributes:
     - avatarId
     - joint

    """


    def __init__(self, avatarId=None, joint=None,):
        self.avatarId = avatarId
        self.joint = joint

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.joint = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetLocalJointRotation_args')
        if self.avatarId is not None:
            oprot.writeFieldBegin('avatarId', TType.STRING, 1)
            oprot.writeString(self.avatarId.encode('utf-8') if sys.version_info[0] == 2 else self.avatarId)
            oprot.writeFieldEnd()
        if self.joint is not None:
            oprot.writeFieldBegin('joint', TType.I32, 2)
            oprot.writeI32(self.joint)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetLocalJointRotation_args)
GetLocalJointRotation_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'joint', None, None, ),  # 2
)


class GetLocalJointRotation_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MMIStandard.math.ttypes.MQuaternion()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetLocalJointRotation_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetLocalJointRotation_result)
GetLocalJointRotation_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [MMIStandard.math.ttypes.MQuaternion, None], None, ),  # 0
)


class SetRootPosition_args(object):
    """
    Attributes:
     - avatarId
     - position

    """


    def __init__(self, avatarId=None, position=None,):
        self.avatarId = avatarId
        self.position = position

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.position = MMIStandard.math.ttypes.MVector3()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetRootPosition_args')
        if self.avatarId is not None:
            oprot.writeFieldBegin('avatarId', TType.STRING, 1)
            oprot.writeString(self.avatarId.encode('utf-8') if sys.version_info[0] == 2 else self.avatarId)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 2)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetRootPosition_args)
SetRootPosition_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarId', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'position', [MMIStandard.math.ttypes.MVector3, None], None, ),  # 2
)


class SetRootPosition_result(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetRootPosition_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetRootPosition_result)
SetRootPosition_result.thrift_spec = (
)


class SetRootRotation_args(object):
    """
    Attributes:
     - avatarId
     - rotation

    """


    def __init__(self, avatarId=None, rotation=None,):
        self.avatarId = avatarId
        self.rotation = rotation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.rotation = MMIStandard.math.ttypes.MQuaternion()
                    self.rotation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetRootRotation_args')
        if self.avatarId is not None:
            oprot.writeFieldBegin('avatarId', TType.STRING, 1)
            oprot.writeString(self.avatarId.encode('utf-8') if sys.version_info[0] == 2 else self.avatarId)
            oprot.writeFieldEnd()
        if self.rotation is not None:
            oprot.writeFieldBegin('rotation', TType.STRUCT, 2)
            self.rotation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetRootRotation_args)
SetRootRotation_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarId', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'rotation', [MMIStandard.math.ttypes.MQuaternion, None], None, ),  # 2
)


class SetRootRotation_result(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetRootRotation_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetRootRotation_result)
SetRootRotation_result.thrift_spec = (
)


class SetGlobalJointPosition_args(object):
    """
    Attributes:
     - avatarId
     - joint
     - position

    """


    def __init__(self, avatarId=None, joint=None, position=None,):
        self.avatarId = avatarId
        self.joint = joint
        self.position = position

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.joint = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.position = MMIStandard.math.ttypes.MVector3()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetGlobalJointPosition_args')
        if self.avatarId is not None:
            oprot.writeFieldBegin('avatarId', TType.STRING, 1)
            oprot.writeString(self.avatarId.encode('utf-8') if sys.version_info[0] == 2 else self.avatarId)
            oprot.writeFieldEnd()
        if self.joint is not None:
            oprot.writeFieldBegin('joint', TType.I32, 2)
            oprot.writeI32(self.joint)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 3)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetGlobalJointPosition_args)
SetGlobalJointPosition_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'joint', None, None, ),  # 2
    (3, TType.STRUCT, 'position', [MMIStandard.math.ttypes.MVector3, None], None, ),  # 3
)


class SetGlobalJointPosition_result(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetGlobalJointPosition_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetGlobalJointPosition_result)
SetGlobalJointPosition_result.thrift_spec = (
)


class SetGlobalJointRotation_args(object):
    """
    Attributes:
     - avatarId
     - joint
     - rotation

    """


    def __init__(self, avatarId=None, joint=None, rotation=None,):
        self.avatarId = avatarId
        self.joint = joint
        self.rotation = rotation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.joint = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.rotation = MMIStandard.math.ttypes.MQuaternion()
                    self.rotation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetGlobalJointRotation_args')
        if self.avatarId is not None:
            oprot.writeFieldBegin('avatarId', TType.STRING, 1)
            oprot.writeString(self.avatarId.encode('utf-8') if sys.version_info[0] == 2 else self.avatarId)
            oprot.writeFieldEnd()
        if self.joint is not None:
            oprot.writeFieldBegin('joint', TType.I32, 2)
            oprot.writeI32(self.joint)
            oprot.writeFieldEnd()
        if self.rotation is not None:
            oprot.writeFieldBegin('rotation', TType.STRUCT, 3)
            self.rotation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetGlobalJointRotation_args)
SetGlobalJointRotation_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'joint', None, None, ),  # 2
    (3, TType.STRUCT, 'rotation', [MMIStandard.math.ttypes.MQuaternion, None], None, ),  # 3
)


class SetGlobalJointRotation_result(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetGlobalJointRotation_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetGlobalJointRotation_result)
SetGlobalJointRotation_result.thrift_spec = (
)


class SetLocalJointPosition_args(object):
    """
    Attributes:
     - avatarId
     - joint
     - position

    """


    def __init__(self, avatarId=None, joint=None, position=None,):
        self.avatarId = avatarId
        self.joint = joint
        self.position = position

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.joint = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.position = MMIStandard.math.ttypes.MVector3()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetLocalJointPosition_args')
        if self.avatarId is not None:
            oprot.writeFieldBegin('avatarId', TType.STRING, 1)
            oprot.writeString(self.avatarId.encode('utf-8') if sys.version_info[0] == 2 else self.avatarId)
            oprot.writeFieldEnd()
        if self.joint is not None:
            oprot.writeFieldBegin('joint', TType.I32, 2)
            oprot.writeI32(self.joint)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 3)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetLocalJointPosition_args)
SetLocalJointPosition_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'joint', None, None, ),  # 2
    (3, TType.STRUCT, 'position', [MMIStandard.math.ttypes.MVector3, None], None, ),  # 3
)


class SetLocalJointPosition_result(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetLocalJointPosition_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetLocalJointPosition_result)
SetLocalJointPosition_result.thrift_spec = (
)


class SetLocalJointRotation_args(object):
    """
    Attributes:
     - avatarId
     - joint
     - rotation

    """


    def __init__(self, avatarId=None, joint=None, rotation=None,):
        self.avatarId = avatarId
        self.joint = joint
        self.rotation = rotation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.joint = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.rotation = MMIStandard.math.ttypes.MQuaternion()
                    self.rotation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetLocalJointRotation_args')
        if self.avatarId is not None:
            oprot.writeFieldBegin('avatarId', TType.STRING, 1)
            oprot.writeString(self.avatarId.encode('utf-8') if sys.version_info[0] == 2 else self.avatarId)
            oprot.writeFieldEnd()
        if self.joint is not None:
            oprot.writeFieldBegin('joint', TType.I32, 2)
            oprot.writeI32(self.joint)
            oprot.writeFieldEnd()
        if self.rotation is not None:
            oprot.writeFieldBegin('rotation', TType.STRUCT, 3)
            self.rotation.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetLocalJointRotation_args)
SetLocalJointRotation_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'joint', None, None, ),  # 2
    (3, TType.STRUCT, 'rotation', [MMIStandard.math.ttypes.MQuaternion, None], None, ),  # 3
)


class SetLocalJointRotation_result(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetLocalJointRotation_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SetLocalJointRotation_result)
SetLocalJointRotation_result.thrift_spec = (
)


class RecomputeCurrentPostureValues_args(object):
    """
    Attributes:
     - avatarId

    """


    def __init__(self, avatarId=None,):
        self.avatarId = avatarId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.avatarId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RecomputeCurrentPostureValues_args')
        if self.avatarId is not None:
            oprot.writeFieldBegin('avatarId', TType.STRING, 1)
            oprot.writeString(self.avatarId.encode('utf-8') if sys.version_info[0] == 2 else self.avatarId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RecomputeCurrentPostureValues_args)
RecomputeCurrentPostureValues_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'avatarId', 'UTF8', None, ),  # 1
)


class RecomputeCurrentPostureValues_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MMIStandard.avatar.ttypes.MAvatarPostureValues()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RecomputeCurrentPostureValues_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RecomputeCurrentPostureValues_result)
RecomputeCurrentPostureValues_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [MMIStandard.avatar.ttypes.MAvatarPostureValues, None], None, ),  # 0
)
fix_spec(all_structs)
del all_structs

