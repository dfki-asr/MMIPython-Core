#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from MOSIM.mmi.cosim import MCoSimulationAccess
from MOSIM.mmi.cosim.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  MBoolResponse RegisterAtEvent(MIPAddress clientAddress, string eventType)')
    print('  MBoolResponse UnregisterAtEvent(MIPAddress clientAddress, string eventType)')
    print('  MBoolResponse AssignInstruction(MInstruction instruction,  properties)')
    print('  MBoolResponse Abort()')
    print('  MBoolResponse AbortInstruction(string instructionID)')
    print('  MBoolResponse AbortInstructions( instructionIDs)')
    print('   GetHistoryFromTime(double startTime, double endTime, string eventType)')
    print('   GetHistoryFromFrames(i32 fromFrame, i32 toFrame, string eventType)')
    print('   GetHistory(string eventType)')
    print('  MCoSimulationEvents GetCurrentEvents()')
    print('   GetStatus()')
    print('  MServiceDescription GetDescription()')
    print('  MBoolResponse Setup(MAvatarDescription avatar,  properties)')
    print('   Consume( properties)')
    print('  MBoolResponse Dispose( properties)')
    print('  MBoolResponse Restart( properties)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = MCoSimulationAccess.Client(protocol)
transport.open()

if cmd == 'RegisterAtEvent':
    if len(args) != 2:
        print('RegisterAtEvent requires 2 args')
        sys.exit(1)
    pp.pprint(client.RegisterAtEvent(eval(args[0]), args[1],))

elif cmd == 'UnregisterAtEvent':
    if len(args) != 2:
        print('UnregisterAtEvent requires 2 args')
        sys.exit(1)
    pp.pprint(client.UnregisterAtEvent(eval(args[0]), args[1],))

elif cmd == 'AssignInstruction':
    if len(args) != 2:
        print('AssignInstruction requires 2 args')
        sys.exit(1)
    pp.pprint(client.AssignInstruction(eval(args[0]), eval(args[1]),))

elif cmd == 'Abort':
    if len(args) != 0:
        print('Abort requires 0 args')
        sys.exit(1)
    pp.pprint(client.Abort())

elif cmd == 'AbortInstruction':
    if len(args) != 1:
        print('AbortInstruction requires 1 args')
        sys.exit(1)
    pp.pprint(client.AbortInstruction(args[0],))

elif cmd == 'AbortInstructions':
    if len(args) != 1:
        print('AbortInstructions requires 1 args')
        sys.exit(1)
    pp.pprint(client.AbortInstructions(eval(args[0]),))

elif cmd == 'GetHistoryFromTime':
    if len(args) != 3:
        print('GetHistoryFromTime requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetHistoryFromTime(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'GetHistoryFromFrames':
    if len(args) != 3:
        print('GetHistoryFromFrames requires 3 args')
        sys.exit(1)
    pp.pprint(client.GetHistoryFromFrames(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'GetHistory':
    if len(args) != 1:
        print('GetHistory requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetHistory(args[0],))

elif cmd == 'GetCurrentEvents':
    if len(args) != 0:
        print('GetCurrentEvents requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetCurrentEvents())

elif cmd == 'GetStatus':
    if len(args) != 0:
        print('GetStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetStatus())

elif cmd == 'GetDescription':
    if len(args) != 0:
        print('GetDescription requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetDescription())

elif cmd == 'Setup':
    if len(args) != 2:
        print('Setup requires 2 args')
        sys.exit(1)
    pp.pprint(client.Setup(eval(args[0]), eval(args[1]),))

elif cmd == 'Consume':
    if len(args) != 1:
        print('Consume requires 1 args')
        sys.exit(1)
    pp.pprint(client.Consume(eval(args[0]),))

elif cmd == 'Dispose':
    if len(args) != 1:
        print('Dispose requires 1 args')
        sys.exit(1)
    pp.pprint(client.Dispose(eval(args[0]),))

elif cmd == 'Restart':
    if len(args) != 1:
        print('Restart requires 1 args')
        sys.exit(1)
    pp.pprint(client.Restart(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
