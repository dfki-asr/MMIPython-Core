#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import MMIStandard.core.ttypes
import MMIStandard.avatar.ttypes
import MMIStandard.scene.ttypes
import MMIStandard.constraints.ttypes

from thrift.transport import TTransport
all_structs = []


class MCoordinateSystemType(object):
    Global = 0
    Local = 1

    _VALUES_TO_NAMES = {
        0: "Global",
        1: "Local",
    }

    _NAMES_TO_VALUES = {
        "Global": 0,
        "Local": 1,
    }


class MDependencyType(object):
    Service = 0
    MMU = 1
    ProgramLibrary = 2
    MMIFramework = 3
    Other = 4

    _VALUES_TO_NAMES = {
        0: "Service",
        1: "MMU",
        2: "ProgramLibrary",
        3: "MMIFramework",
        4: "Other",
    }

    _NAMES_TO_VALUES = {
        "Service": 0,
        "MMU": 1,
        "ProgramLibrary": 2,
        "MMIFramework": 3,
        "Other": 4,
    }


class MSimulationState(object):
    """
    Attributes:
     - Initial
     - Current
     - Constraints
     - SceneManipulations
     - Events

    """


    def __init__(self, Initial=None, Current=None, Constraints=None, SceneManipulations=None, Events=None,):
        self.Initial = Initial
        self.Current = Current
        self.Constraints = Constraints
        self.SceneManipulations = SceneManipulations
        self.Events = Events

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.Initial = MMIStandard.avatar.ttypes.MAvatarPostureValues()
                    self.Initial.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.Current = MMIStandard.avatar.ttypes.MAvatarPostureValues()
                    self.Current.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.Constraints = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = MMIStandard.constraints.ttypes.MConstraint()
                        _elem5.read(iprot)
                        self.Constraints.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.SceneManipulations = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = MMIStandard.scene.ttypes.MSceneManipulation()
                        _elem11.read(iprot)
                        self.SceneManipulations.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.Events = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = MSimulationEvent()
                        _elem17.read(iprot)
                        self.Events.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MSimulationState')
        if self.Initial is not None:
            oprot.writeFieldBegin('Initial', TType.STRUCT, 1)
            self.Initial.write(oprot)
            oprot.writeFieldEnd()
        if self.Current is not None:
            oprot.writeFieldBegin('Current', TType.STRUCT, 2)
            self.Current.write(oprot)
            oprot.writeFieldEnd()
        if self.Constraints is not None:
            oprot.writeFieldBegin('Constraints', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.Constraints))
            for iter18 in self.Constraints:
                iter18.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.SceneManipulations is not None:
            oprot.writeFieldBegin('SceneManipulations', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.SceneManipulations))
            for iter19 in self.SceneManipulations:
                iter19.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Events is not None:
            oprot.writeFieldBegin('Events', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.Events))
            for iter20 in self.Events:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Initial is None:
            raise TProtocolException(message='Required field Initial is unset!')
        if self.Current is None:
            raise TProtocolException(message='Required field Current is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MSimulationResult(object):
    """
    Attributes:
     - Posture
     - Constraints
     - Events
     - SceneManipulations
     - DrawingCalls
     - LogData

    """


    def __init__(self, Posture=None, Constraints=None, Events=None, SceneManipulations=None, DrawingCalls=None, LogData=None,):
        self.Posture = Posture
        self.Constraints = Constraints
        self.Events = Events
        self.SceneManipulations = SceneManipulations
        self.DrawingCalls = DrawingCalls
        self.LogData = LogData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.Posture = MMIStandard.avatar.ttypes.MAvatarPostureValues()
                    self.Posture.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.Constraints = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = MMIStandard.constraints.ttypes.MConstraint()
                        _elem26.read(iprot)
                        self.Constraints.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.Events = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = MSimulationEvent()
                        _elem32.read(iprot)
                        self.Events.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.SceneManipulations = []
                    (_etype36, _size33) = iprot.readListBegin()
                    for _i37 in range(_size33):
                        _elem38 = MMIStandard.scene.ttypes.MSceneManipulation()
                        _elem38.read(iprot)
                        self.SceneManipulations.append(_elem38)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.DrawingCalls = []
                    (_etype42, _size39) = iprot.readListBegin()
                    for _i43 in range(_size39):
                        _elem44 = MMIStandard.scene.ttypes.MDrawingCall()
                        _elem44.read(iprot)
                        self.DrawingCalls.append(_elem44)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.LogData = []
                    (_etype48, _size45) = iprot.readListBegin()
                    for _i49 in range(_size45):
                        _elem50 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.LogData.append(_elem50)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MSimulationResult')
        if self.Posture is not None:
            oprot.writeFieldBegin('Posture', TType.STRUCT, 1)
            self.Posture.write(oprot)
            oprot.writeFieldEnd()
        if self.Constraints is not None:
            oprot.writeFieldBegin('Constraints', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.Constraints))
            for iter51 in self.Constraints:
                iter51.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Events is not None:
            oprot.writeFieldBegin('Events', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.Events))
            for iter52 in self.Events:
                iter52.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.SceneManipulations is not None:
            oprot.writeFieldBegin('SceneManipulations', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.SceneManipulations))
            for iter53 in self.SceneManipulations:
                iter53.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.DrawingCalls is not None:
            oprot.writeFieldBegin('DrawingCalls', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.DrawingCalls))
            for iter54 in self.DrawingCalls:
                iter54.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.LogData is not None:
            oprot.writeFieldBegin('LogData', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.LogData))
            for iter55 in self.LogData:
                oprot.writeString(iter55.encode('utf-8') if sys.version_info[0] == 2 else iter55)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Posture is None:
            raise TProtocolException(message='Required field Posture is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MSimulationEvent(object):
    """
    Attributes:
     - Name
     - Type
     - Reference
     - Properties

    """


    def __init__(self, Name=None, Type=None, Reference=None, Properties=None,):
        self.Name = Name
        self.Type = Type
        self.Reference = Reference
        self.Properties = Properties

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Reference = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.Properties = {}
                    (_ktype57, _vtype58, _size56) = iprot.readMapBegin()
                    for _i60 in range(_size56):
                        _key61 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val62 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.Properties[_key61] = _val62
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MSimulationEvent')
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 1)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Type is not None:
            oprot.writeFieldBegin('Type', TType.STRING, 2)
            oprot.writeString(self.Type.encode('utf-8') if sys.version_info[0] == 2 else self.Type)
            oprot.writeFieldEnd()
        if self.Reference is not None:
            oprot.writeFieldBegin('Reference', TType.STRING, 3)
            oprot.writeString(self.Reference.encode('utf-8') if sys.version_info[0] == 2 else self.Reference)
            oprot.writeFieldEnd()
        if self.Properties is not None:
            oprot.writeFieldBegin('Properties', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.Properties))
            for kiter63, viter64 in self.Properties.items():
                oprot.writeString(kiter63.encode('utf-8') if sys.version_info[0] == 2 else kiter63)
                oprot.writeString(viter64.encode('utf-8') if sys.version_info[0] == 2 else viter64)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Name is None:
            raise TProtocolException(message='Required field Name is unset!')
        if self.Type is None:
            raise TProtocolException(message='Required field Type is unset!')
        if self.Reference is None:
            raise TProtocolException(message='Required field Reference is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MVersion(object):
    """
    Attributes:
     - Major
     - Minor
     - Sub
     - Subsub

    """


    def __init__(self, Major=None, Minor=None, Sub=None, Subsub=None,):
        self.Major = Major
        self.Minor = Minor
        self.Sub = Sub
        self.Subsub = Subsub

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.Major = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.Minor = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.Sub = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.Subsub = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MVersion')
        if self.Major is not None:
            oprot.writeFieldBegin('Major', TType.I16, 1)
            oprot.writeI16(self.Major)
            oprot.writeFieldEnd()
        if self.Minor is not None:
            oprot.writeFieldBegin('Minor', TType.I16, 2)
            oprot.writeI16(self.Minor)
            oprot.writeFieldEnd()
        if self.Sub is not None:
            oprot.writeFieldBegin('Sub', TType.I16, 3)
            oprot.writeI16(self.Sub)
            oprot.writeFieldEnd()
        if self.Subsub is not None:
            oprot.writeFieldBegin('Subsub', TType.I16, 4)
            oprot.writeI16(self.Subsub)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Major is None:
            raise TProtocolException(message='Required field Major is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MDependency(object):
    """
    Attributes:
     - ID
     - Type
     - MinVersion
     - MaxVersion
     - ExcludedVersions
     - Name

    """


    def __init__(self, ID=None, Type=None, MinVersion=None, MaxVersion=None, ExcludedVersions=None, Name=None,):
        self.ID = ID
        self.Type = Type
        self.MinVersion = MinVersion
        self.MaxVersion = MaxVersion
        self.ExcludedVersions = ExcludedVersions
        self.Name = Name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.Type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.MinVersion = MVersion()
                    self.MinVersion.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.MaxVersion = MVersion()
                    self.MaxVersion.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.ExcludedVersions = []
                    (_etype68, _size65) = iprot.readListBegin()
                    for _i69 in range(_size65):
                        _elem70 = MVersion()
                        _elem70.read(iprot)
                        self.ExcludedVersions.append(_elem70)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MDependency')
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 1)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.Type is not None:
            oprot.writeFieldBegin('Type', TType.I32, 2)
            oprot.writeI32(self.Type)
            oprot.writeFieldEnd()
        if self.MinVersion is not None:
            oprot.writeFieldBegin('MinVersion', TType.STRUCT, 3)
            self.MinVersion.write(oprot)
            oprot.writeFieldEnd()
        if self.MaxVersion is not None:
            oprot.writeFieldBegin('MaxVersion', TType.STRUCT, 4)
            self.MaxVersion.write(oprot)
            oprot.writeFieldEnd()
        if self.ExcludedVersions is not None:
            oprot.writeFieldBegin('ExcludedVersions', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.ExcludedVersions))
            for iter71 in self.ExcludedVersions:
                iter71.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 6)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ID is None:
            raise TProtocolException(message='Required field ID is unset!')
        if self.Type is None:
            raise TProtocolException(message='Required field Type is unset!')
        if self.MinVersion is None:
            raise TProtocolException(message='Required field MinVersion is unset!')
        if self.MaxVersion is None:
            raise TProtocolException(message='Required field MaxVersion is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MMUDescription(object):
    """
    Attributes:
     - Name
     - ID
     - AssemblyName
     - MotionType
     - Language
     - Author
     - Version
     - Prerequisites
     - Properties
     - Dependencies
     - Events
     - LongDescription
     - ShortDescription
     - Parameters
     - SceneParameters
     - Vendor
     - VendorDomain
     - MmuUrl
     - UpdateUrl

    """


    def __init__(self, Name=None, ID=None, AssemblyName=None, MotionType=None, Language=None, Author=None, Version=None, Prerequisites=None, Properties=None, Dependencies=None, Events=None, LongDescription=None, ShortDescription=None, Parameters=None, SceneParameters=None, Vendor=None, VendorDomain=None, MmuUrl=None, UpdateUrl=None,):
        self.Name = Name
        self.ID = ID
        self.AssemblyName = AssemblyName
        self.MotionType = MotionType
        self.Language = Language
        self.Author = Author
        self.Version = Version
        self.Prerequisites = Prerequisites
        self.Properties = Properties
        self.Dependencies = Dependencies
        self.Events = Events
        self.LongDescription = LongDescription
        self.ShortDescription = ShortDescription
        self.Parameters = Parameters
        self.SceneParameters = SceneParameters
        self.Vendor = Vendor
        self.VendorDomain = VendorDomain
        self.MmuUrl = MmuUrl
        self.UpdateUrl = UpdateUrl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.AssemblyName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.MotionType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.Language = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.Author = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.Version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.Prerequisites = []
                    (_etype75, _size72) = iprot.readListBegin()
                    for _i76 in range(_size72):
                        _elem77 = MMIStandard.constraints.ttypes.MConstraint()
                        _elem77.read(iprot)
                        self.Prerequisites.append(_elem77)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.MAP:
                    self.Properties = {}
                    (_ktype79, _vtype80, _size78) = iprot.readMapBegin()
                    for _i82 in range(_size78):
                        _key83 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val84 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.Properties[_key83] = _val84
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.Dependencies = []
                    (_etype88, _size85) = iprot.readListBegin()
                    for _i89 in range(_size85):
                        _elem90 = MDependency()
                        _elem90.read(iprot)
                        self.Dependencies.append(_elem90)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.Events = []
                    (_etype94, _size91) = iprot.readListBegin()
                    for _i95 in range(_size91):
                        _elem96 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.Events.append(_elem96)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.LongDescription = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.ShortDescription = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.Parameters = []
                    (_etype100, _size97) = iprot.readListBegin()
                    for _i101 in range(_size97):
                        _elem102 = MMIStandard.core.ttypes.MParameter()
                        _elem102.read(iprot)
                        self.Parameters.append(_elem102)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.LIST:
                    self.SceneParameters = []
                    (_etype106, _size103) = iprot.readListBegin()
                    for _i107 in range(_size103):
                        _elem108 = MMIStandard.core.ttypes.MParameter()
                        _elem108.read(iprot)
                        self.SceneParameters.append(_elem108)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.Vendor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.VendorDomain = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.MmuUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.UpdateUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MMUDescription')
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 1)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 2)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.AssemblyName is not None:
            oprot.writeFieldBegin('AssemblyName', TType.STRING, 3)
            oprot.writeString(self.AssemblyName.encode('utf-8') if sys.version_info[0] == 2 else self.AssemblyName)
            oprot.writeFieldEnd()
        if self.MotionType is not None:
            oprot.writeFieldBegin('MotionType', TType.STRING, 4)
            oprot.writeString(self.MotionType.encode('utf-8') if sys.version_info[0] == 2 else self.MotionType)
            oprot.writeFieldEnd()
        if self.Language is not None:
            oprot.writeFieldBegin('Language', TType.STRING, 6)
            oprot.writeString(self.Language.encode('utf-8') if sys.version_info[0] == 2 else self.Language)
            oprot.writeFieldEnd()
        if self.Author is not None:
            oprot.writeFieldBegin('Author', TType.STRING, 7)
            oprot.writeString(self.Author.encode('utf-8') if sys.version_info[0] == 2 else self.Author)
            oprot.writeFieldEnd()
        if self.Version is not None:
            oprot.writeFieldBegin('Version', TType.STRING, 8)
            oprot.writeString(self.Version.encode('utf-8') if sys.version_info[0] == 2 else self.Version)
            oprot.writeFieldEnd()
        if self.Prerequisites is not None:
            oprot.writeFieldBegin('Prerequisites', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.Prerequisites))
            for iter109 in self.Prerequisites:
                iter109.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Properties is not None:
            oprot.writeFieldBegin('Properties', TType.MAP, 11)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.Properties))
            for kiter110, viter111 in self.Properties.items():
                oprot.writeString(kiter110.encode('utf-8') if sys.version_info[0] == 2 else kiter110)
                oprot.writeString(viter111.encode('utf-8') if sys.version_info[0] == 2 else viter111)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.Dependencies is not None:
            oprot.writeFieldBegin('Dependencies', TType.LIST, 12)
            oprot.writeListBegin(TType.STRUCT, len(self.Dependencies))
            for iter112 in self.Dependencies:
                iter112.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Events is not None:
            oprot.writeFieldBegin('Events', TType.LIST, 13)
            oprot.writeListBegin(TType.STRING, len(self.Events))
            for iter113 in self.Events:
                oprot.writeString(iter113.encode('utf-8') if sys.version_info[0] == 2 else iter113)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.LongDescription is not None:
            oprot.writeFieldBegin('LongDescription', TType.STRING, 14)
            oprot.writeString(self.LongDescription.encode('utf-8') if sys.version_info[0] == 2 else self.LongDescription)
            oprot.writeFieldEnd()
        if self.ShortDescription is not None:
            oprot.writeFieldBegin('ShortDescription', TType.STRING, 15)
            oprot.writeString(self.ShortDescription.encode('utf-8') if sys.version_info[0] == 2 else self.ShortDescription)
            oprot.writeFieldEnd()
        if self.Parameters is not None:
            oprot.writeFieldBegin('Parameters', TType.LIST, 16)
            oprot.writeListBegin(TType.STRUCT, len(self.Parameters))
            for iter114 in self.Parameters:
                iter114.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.SceneParameters is not None:
            oprot.writeFieldBegin('SceneParameters', TType.LIST, 17)
            oprot.writeListBegin(TType.STRUCT, len(self.SceneParameters))
            for iter115 in self.SceneParameters:
                iter115.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Vendor is not None:
            oprot.writeFieldBegin('Vendor', TType.STRING, 18)
            oprot.writeString(self.Vendor.encode('utf-8') if sys.version_info[0] == 2 else self.Vendor)
            oprot.writeFieldEnd()
        if self.VendorDomain is not None:
            oprot.writeFieldBegin('VendorDomain', TType.STRING, 19)
            oprot.writeString(self.VendorDomain.encode('utf-8') if sys.version_info[0] == 2 else self.VendorDomain)
            oprot.writeFieldEnd()
        if self.MmuUrl is not None:
            oprot.writeFieldBegin('MmuUrl', TType.STRING, 20)
            oprot.writeString(self.MmuUrl.encode('utf-8') if sys.version_info[0] == 2 else self.MmuUrl)
            oprot.writeFieldEnd()
        if self.UpdateUrl is not None:
            oprot.writeFieldBegin('UpdateUrl', TType.STRING, 21)
            oprot.writeString(self.UpdateUrl.encode('utf-8') if sys.version_info[0] == 2 else self.UpdateUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Name is None:
            raise TProtocolException(message='Required field Name is unset!')
        if self.ID is None:
            raise TProtocolException(message='Required field ID is unset!')
        if self.AssemblyName is None:
            raise TProtocolException(message='Required field AssemblyName is unset!')
        if self.MotionType is None:
            raise TProtocolException(message='Required field MotionType is unset!')
        if self.Language is None:
            raise TProtocolException(message='Required field Language is unset!')
        if self.Author is None:
            raise TProtocolException(message='Required field Author is unset!')
        if self.Version is None:
            raise TProtocolException(message='Required field Version is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MInstruction(object):
    """
    Attributes:
     - ID
     - Name
     - MotionType
     - AvatarID
     - Properties
     - Constraints
     - StartCondition
     - EndCondition
     - Action
     - Instructions

    """


    def __init__(self, ID=None, Name=None, MotionType=None, AvatarID=None, Properties=None, Constraints=None, StartCondition=None, EndCondition=None, Action=None, Instructions=None,):
        self.ID = ID
        self.Name = Name
        self.MotionType = MotionType
        self.AvatarID = AvatarID
        self.Properties = Properties
        self.Constraints = Constraints
        self.StartCondition = StartCondition
        self.EndCondition = EndCondition
        self.Action = Action
        self.Instructions = Instructions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.MotionType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.AvatarID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.Properties = {}
                    (_ktype117, _vtype118, _size116) = iprot.readMapBegin()
                    for _i120 in range(_size116):
                        _key121 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val122 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.Properties[_key121] = _val122
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.Constraints = []
                    (_etype126, _size123) = iprot.readListBegin()
                    for _i127 in range(_size123):
                        _elem128 = MMIStandard.constraints.ttypes.MConstraint()
                        _elem128.read(iprot)
                        self.Constraints.append(_elem128)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.StartCondition = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.EndCondition = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.Action = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.Instructions = []
                    (_etype132, _size129) = iprot.readListBegin()
                    for _i133 in range(_size129):
                        _elem134 = MInstruction()
                        _elem134.read(iprot)
                        self.Instructions.append(_elem134)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MInstruction')
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 1)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.MotionType is not None:
            oprot.writeFieldBegin('MotionType', TType.STRING, 3)
            oprot.writeString(self.MotionType.encode('utf-8') if sys.version_info[0] == 2 else self.MotionType)
            oprot.writeFieldEnd()
        if self.AvatarID is not None:
            oprot.writeFieldBegin('AvatarID', TType.STRING, 4)
            oprot.writeString(self.AvatarID.encode('utf-8') if sys.version_info[0] == 2 else self.AvatarID)
            oprot.writeFieldEnd()
        if self.Properties is not None:
            oprot.writeFieldBegin('Properties', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.Properties))
            for kiter135, viter136 in self.Properties.items():
                oprot.writeString(kiter135.encode('utf-8') if sys.version_info[0] == 2 else kiter135)
                oprot.writeString(viter136.encode('utf-8') if sys.version_info[0] == 2 else viter136)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.Constraints is not None:
            oprot.writeFieldBegin('Constraints', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.Constraints))
            for iter137 in self.Constraints:
                iter137.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.StartCondition is not None:
            oprot.writeFieldBegin('StartCondition', TType.STRING, 7)
            oprot.writeString(self.StartCondition.encode('utf-8') if sys.version_info[0] == 2 else self.StartCondition)
            oprot.writeFieldEnd()
        if self.EndCondition is not None:
            oprot.writeFieldBegin('EndCondition', TType.STRING, 8)
            oprot.writeString(self.EndCondition.encode('utf-8') if sys.version_info[0] == 2 else self.EndCondition)
            oprot.writeFieldEnd()
        if self.Action is not None:
            oprot.writeFieldBegin('Action', TType.STRING, 9)
            oprot.writeString(self.Action.encode('utf-8') if sys.version_info[0] == 2 else self.Action)
            oprot.writeFieldEnd()
        if self.Instructions is not None:
            oprot.writeFieldBegin('Instructions', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.Instructions))
            for iter138 in self.Instructions:
                iter138.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ID is None:
            raise TProtocolException(message='Required field ID is unset!')
        if self.Name is None:
            raise TProtocolException(message='Required field Name is unset!')
        if self.MotionType is None:
            raise TProtocolException(message='Required field MotionType is unset!')
        if self.AvatarID is None:
            raise TProtocolException(message='Required field AvatarID is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(MSimulationState)
MSimulationState.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'Initial', [MMIStandard.avatar.ttypes.MAvatarPostureValues, None], None, ),  # 1
    (2, TType.STRUCT, 'Current', [MMIStandard.avatar.ttypes.MAvatarPostureValues, None], None, ),  # 2
    (3, TType.LIST, 'Constraints', (TType.STRUCT, [MMIStandard.constraints.ttypes.MConstraint, None], False), None, ),  # 3
    (4, TType.LIST, 'SceneManipulations', (TType.STRUCT, [MMIStandard.scene.ttypes.MSceneManipulation, None], False), None, ),  # 4
    (5, TType.LIST, 'Events', (TType.STRUCT, [MSimulationEvent, None], False), None, ),  # 5
)
all_structs.append(MSimulationResult)
MSimulationResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'Posture', [MMIStandard.avatar.ttypes.MAvatarPostureValues, None], None, ),  # 1
    (2, TType.LIST, 'Constraints', (TType.STRUCT, [MMIStandard.constraints.ttypes.MConstraint, None], False), None, ),  # 2
    (3, TType.LIST, 'Events', (TType.STRUCT, [MSimulationEvent, None], False), None, ),  # 3
    (4, TType.LIST, 'SceneManipulations', (TType.STRUCT, [MMIStandard.scene.ttypes.MSceneManipulation, None], False), None, ),  # 4
    (5, TType.LIST, 'DrawingCalls', (TType.STRUCT, [MMIStandard.scene.ttypes.MDrawingCall, None], False), None, ),  # 5
    (6, TType.LIST, 'LogData', (TType.STRING, 'UTF8', False), None, ),  # 6
)
all_structs.append(MSimulationEvent)
MSimulationEvent.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'Reference', 'UTF8', None, ),  # 3
    (4, TType.MAP, 'Properties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 4
)
all_structs.append(MVersion)
MVersion.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'Major', None, None, ),  # 1
    (2, TType.I16, 'Minor', None, None, ),  # 2
    (3, TType.I16, 'Sub', None, None, ),  # 3
    (4, TType.I16, 'Subsub', None, None, ),  # 4
)
all_structs.append(MDependency)
MDependency.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ID', 'UTF8', None, ),  # 1
    (2, TType.I32, 'Type', None, None, ),  # 2
    (3, TType.STRUCT, 'MinVersion', [MVersion, None], None, ),  # 3
    (4, TType.STRUCT, 'MaxVersion', [MVersion, None], None, ),  # 4
    (5, TType.LIST, 'ExcludedVersions', (TType.STRUCT, [MVersion, None], False), None, ),  # 5
    (6, TType.STRING, 'Name', 'UTF8', None, ),  # 6
)
all_structs.append(MMUDescription)
MMUDescription.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ID', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'AssemblyName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'MotionType', 'UTF8', None, ),  # 4
    None,  # 5
    (6, TType.STRING, 'Language', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'Author', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'Version', 'UTF8', None, ),  # 8
    (9, TType.LIST, 'Prerequisites', (TType.STRUCT, [MMIStandard.constraints.ttypes.MConstraint, None], False), None, ),  # 9
    None,  # 10
    (11, TType.MAP, 'Properties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 11
    (12, TType.LIST, 'Dependencies', (TType.STRUCT, [MDependency, None], False), None, ),  # 12
    (13, TType.LIST, 'Events', (TType.STRING, 'UTF8', False), None, ),  # 13
    (14, TType.STRING, 'LongDescription', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'ShortDescription', 'UTF8', None, ),  # 15
    (16, TType.LIST, 'Parameters', (TType.STRUCT, [MMIStandard.core.ttypes.MParameter, None], False), None, ),  # 16
    (17, TType.LIST, 'SceneParameters', (TType.STRUCT, [MMIStandard.core.ttypes.MParameter, None], False), None, ),  # 17
    (18, TType.STRING, 'Vendor', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'VendorDomain', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'MmuUrl', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'UpdateUrl', 'UTF8', None, ),  # 21
)
all_structs.append(MInstruction)
MInstruction.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'MotionType', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'AvatarID', 'UTF8', None, ),  # 4
    (5, TType.MAP, 'Properties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.LIST, 'Constraints', (TType.STRUCT, [MMIStandard.constraints.ttypes.MConstraint, None], False), None, ),  # 6
    (7, TType.STRING, 'StartCondition', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'EndCondition', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'Action', 'UTF8', None, ),  # 9
    (10, TType.LIST, 'Instructions', (TType.STRUCT, [MInstruction, None], False), None, ),  # 10
)
fix_spec(all_structs)
del all_structs
