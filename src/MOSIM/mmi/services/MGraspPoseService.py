#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import MMIStandard.services.MMIServiceBase
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(MMIStandard.services.MMIServiceBase.Iface):
    def GetGraspPoses(self, posture, handType, sceneObject, repositionHand):
        """
        Parameters:
         - posture
         - handType
         - sceneObject
         - repositionHand

        """
        pass


class Client(MMIStandard.services.MMIServiceBase.Client, Iface):
    def __init__(self, iprot, oprot=None):
        MMIStandard.services.MMIServiceBase.Client.__init__(self, iprot, oprot)

    def GetGraspPoses(self, posture, handType, sceneObject, repositionHand):
        """
        Parameters:
         - posture
         - handType
         - sceneObject
         - repositionHand

        """
        self.send_GetGraspPoses(posture, handType, sceneObject, repositionHand)
        return self.recv_GetGraspPoses()

    def send_GetGraspPoses(self, posture, handType, sceneObject, repositionHand):
        self._oprot.writeMessageBegin('GetGraspPoses', TMessageType.CALL, self._seqid)
        args = GetGraspPoses_args()
        args.posture = posture
        args.handType = handType
        args.sceneObject = sceneObject
        args.repositionHand = repositionHand
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetGraspPoses(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetGraspPoses_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetGraspPoses failed: unknown result")


class Processor(MMIStandard.services.MMIServiceBase.Processor, Iface, TProcessor):
    def __init__(self, handler):
        MMIStandard.services.MMIServiceBase.Processor.__init__(self, handler)
        self._processMap["GetGraspPoses"] = Processor.process_GetGraspPoses
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_GetGraspPoses(self, seqid, iprot, oprot):
        args = GetGraspPoses_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetGraspPoses_result()
        try:
            result.success = self._handler.GetGraspPoses(args.posture, args.handType, args.sceneObject, args.repositionHand)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetGraspPoses", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class GetGraspPoses_args(object):
    """
    Attributes:
     - posture
     - handType
     - sceneObject
     - repositionHand

    """


    def __init__(self, posture=None, handType=None, sceneObject=None, repositionHand=None,):
        self.posture = posture
        self.handType = handType
        self.sceneObject = sceneObject
        self.repositionHand = repositionHand

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.posture = MMIStandard.avatar.ttypes.MAvatarPostureValues()
                    self.posture.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.handType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sceneObject = MMIStandard.scene.ttypes.MSceneObject()
                    self.sceneObject.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.repositionHand = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetGraspPoses_args')
        if self.posture is not None:
            oprot.writeFieldBegin('posture', TType.STRUCT, 1)
            self.posture.write(oprot)
            oprot.writeFieldEnd()
        if self.handType is not None:
            oprot.writeFieldBegin('handType', TType.I32, 2)
            oprot.writeI32(self.handType)
            oprot.writeFieldEnd()
        if self.sceneObject is not None:
            oprot.writeFieldBegin('sceneObject', TType.STRUCT, 3)
            self.sceneObject.write(oprot)
            oprot.writeFieldEnd()
        if self.repositionHand is not None:
            oprot.writeFieldBegin('repositionHand', TType.BOOL, 4)
            oprot.writeBool(self.repositionHand)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetGraspPoses_args)
GetGraspPoses_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'posture', [MMIStandard.avatar.ttypes.MAvatarPostureValues, None], None, ),  # 1
    (2, TType.I32, 'handType', None, None, ),  # 2
    (3, TType.STRUCT, 'sceneObject', [MMIStandard.scene.ttypes.MSceneObject, None], None, ),  # 3
    (4, TType.BOOL, 'repositionHand', None, None, ),  # 4
)


class GetGraspPoses_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype260, _size257) = iprot.readListBegin()
                    for _i261 in range(_size257):
                        _elem262 = MMIStandard.constraints.ttypes.MGeometryConstraint()
                        _elem262.read(iprot)
                        self.success.append(_elem262)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetGraspPoses_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter263 in self.success:
                iter263.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(GetGraspPoses_result)
GetGraspPoses_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [MMIStandard.constraints.ttypes.MGeometryConstraint, None], False), None, ),  # 0
)
fix_spec(all_structs)
del all_structs

