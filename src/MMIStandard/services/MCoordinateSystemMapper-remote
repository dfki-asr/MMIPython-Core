#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from MMIStandard.services import MCoordinateSystemMapper
from MMIStandard.services.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  MTransform TransformToMMI_L(MTransform transform,  coordinateSystem)')
    print('  MTransform TransformToMMI(MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)')
    print('  MTransform TransformFromMMI_L(MTransform transform,  coordinateSystem)')
    print('  MTransform TransformFromMMI(MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)')
    print('  MQuaternion QuaternionToMMI_L(MQuaternion quat,  coordinateSystem)')
    print('  MQuaternion QuaternionToMMI(MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)')
    print('  MQuaternion QuaternionFromMMI_L(MQuaternion quat,  coordinateSystem)')
    print('  MQuaternion QuaternionFromMMI(MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)')
    print('  MVector3 VectorToMMI_L(MVector3 quat,  coordinateSystem)')
    print('  MVector3 VectorToMMI(MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)')
    print('  MVector3 VectorFromMMI_L(MVector3 quat,  coordinateSystem)')
    print('  MVector3 VectorFromMMI(MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)')
    print('   GetStatus()')
    print('  MServiceDescription GetDescription()')
    print('  MBoolResponse Setup(MAvatarDescription avatar,  properties)')
    print('   Consume( properties)')
    print('  MBoolResponse Dispose( properties)')
    print('  MBoolResponse Restart( properties)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = MCoordinateSystemMapper.Client(protocol)
transport.open()

if cmd == 'TransformToMMI_L':
    if len(args) != 2:
        print('TransformToMMI_L requires 2 args')
        sys.exit(1)
    pp.pprint(client.TransformToMMI_L(eval(args[0]), eval(args[1]),))

elif cmd == 'TransformToMMI':
    if len(args) != 4:
        print('TransformToMMI requires 4 args')
        sys.exit(1)
    pp.pprint(client.TransformToMMI(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'TransformFromMMI_L':
    if len(args) != 2:
        print('TransformFromMMI_L requires 2 args')
        sys.exit(1)
    pp.pprint(client.TransformFromMMI_L(eval(args[0]), eval(args[1]),))

elif cmd == 'TransformFromMMI':
    if len(args) != 4:
        print('TransformFromMMI requires 4 args')
        sys.exit(1)
    pp.pprint(client.TransformFromMMI(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'QuaternionToMMI_L':
    if len(args) != 2:
        print('QuaternionToMMI_L requires 2 args')
        sys.exit(1)
    pp.pprint(client.QuaternionToMMI_L(eval(args[0]), eval(args[1]),))

elif cmd == 'QuaternionToMMI':
    if len(args) != 4:
        print('QuaternionToMMI requires 4 args')
        sys.exit(1)
    pp.pprint(client.QuaternionToMMI(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'QuaternionFromMMI_L':
    if len(args) != 2:
        print('QuaternionFromMMI_L requires 2 args')
        sys.exit(1)
    pp.pprint(client.QuaternionFromMMI_L(eval(args[0]), eval(args[1]),))

elif cmd == 'QuaternionFromMMI':
    if len(args) != 4:
        print('QuaternionFromMMI requires 4 args')
        sys.exit(1)
    pp.pprint(client.QuaternionFromMMI(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'VectorToMMI_L':
    if len(args) != 2:
        print('VectorToMMI_L requires 2 args')
        sys.exit(1)
    pp.pprint(client.VectorToMMI_L(eval(args[0]), eval(args[1]),))

elif cmd == 'VectorToMMI':
    if len(args) != 4:
        print('VectorToMMI requires 4 args')
        sys.exit(1)
    pp.pprint(client.VectorToMMI(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'VectorFromMMI_L':
    if len(args) != 2:
        print('VectorFromMMI_L requires 2 args')
        sys.exit(1)
    pp.pprint(client.VectorFromMMI_L(eval(args[0]), eval(args[1]),))

elif cmd == 'VectorFromMMI':
    if len(args) != 4:
        print('VectorFromMMI requires 4 args')
        sys.exit(1)
    pp.pprint(client.VectorFromMMI(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'GetStatus':
    if len(args) != 0:
        print('GetStatus requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetStatus())

elif cmd == 'GetDescription':
    if len(args) != 0:
        print('GetDescription requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetDescription())

elif cmd == 'Setup':
    if len(args) != 2:
        print('Setup requires 2 args')
        sys.exit(1)
    pp.pprint(client.Setup(eval(args[0]), eval(args[1]),))

elif cmd == 'Consume':
    if len(args) != 1:
        print('Consume requires 1 args')
        sys.exit(1)
    pp.pprint(client.Consume(eval(args[0]),))

elif cmd == 'Dispose':
    if len(args) != 1:
        print('Dispose requires 1 args')
        sys.exit(1)
    pp.pprint(client.Dispose(eval(args[0]),))

elif cmd == 'Restart':
    if len(args) != 1:
        print('Restart requires 1 args')
        sys.exit(1)
    pp.pprint(client.Restart(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
