#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import MMIStandard.math.ttypes
import MMIStandard.core.ttypes
import MMIStandard.avatar.ttypes
import MMIStandard.constraints.ttypes

from thrift.transport import TTransport
all_structs = []


class MDrawingCallType(object):
    DrawLine2D = 0
    DrawLine3D = 1
    DrawPoint2D = 2
    DrawPoint3D = 3
    DrawText = 4
    Custom = 5

    _VALUES_TO_NAMES = {
        0: "DrawLine2D",
        1: "DrawLine3D",
        2: "DrawPoint2D",
        3: "DrawPoint3D",
        4: "DrawText",
        5: "Custom",
    }

    _NAMES_TO_VALUES = {
        "DrawLine2D": 0,
        "DrawLine3D": 1,
        "DrawPoint2D": 2,
        "DrawPoint3D": 3,
        "DrawText": 4,
        "Custom": 5,
    }


class MPhysicsInteractionType(object):
    AddForce = 0
    AddTorque = 1
    ChangeVelocity = 2
    ChangeAngularVelocity = 3
    ChangeMass = 4
    ChangeCenterOfMass = 5
    ChangeInertia = 6

    _VALUES_TO_NAMES = {
        0: "AddForce",
        1: "AddTorque",
        2: "ChangeVelocity",
        3: "ChangeAngularVelocity",
        4: "ChangeMass",
        5: "ChangeCenterOfMass",
        6: "ChangeInertia",
    }

    _NAMES_TO_VALUES = {
        "AddForce": 0,
        "AddTorque": 1,
        "ChangeVelocity": 2,
        "ChangeAngularVelocity": 3,
        "ChangeMass": 4,
        "ChangeCenterOfMass": 5,
        "ChangeInertia": 6,
    }


class MColliderType(object):
    Box = 0
    Sphere = 1
    Capsule = 2
    Cone = 3
    Cylinder = 4
    Mesh = 5
    Custom = 6

    _VALUES_TO_NAMES = {
        0: "Box",
        1: "Sphere",
        2: "Capsule",
        3: "Cone",
        4: "Cylinder",
        5: "Mesh",
        6: "Custom",
    }

    _NAMES_TO_VALUES = {
        "Box": 0,
        "Sphere": 1,
        "Capsule": 2,
        "Cone": 3,
        "Cylinder": 4,
        "Mesh": 5,
        "Custom": 6,
    }


class MAttachment(object):
    """
    Attributes:
     - Parent
     - Child
     - Type

    """


    def __init__(self, Parent=None, Child=None, Type=None,):
        self.Parent = Parent
        self.Child = Child
        self.Type = Type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Parent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Child = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MAttachment')
        if self.Parent is not None:
            oprot.writeFieldBegin('Parent', TType.STRING, 1)
            oprot.writeString(self.Parent.encode('utf-8') if sys.version_info[0] == 2 else self.Parent)
            oprot.writeFieldEnd()
        if self.Child is not None:
            oprot.writeFieldBegin('Child', TType.STRING, 2)
            oprot.writeString(self.Child.encode('utf-8') if sys.version_info[0] == 2 else self.Child)
            oprot.writeFieldEnd()
        if self.Type is not None:
            oprot.writeFieldBegin('Type', TType.STRING, 3)
            oprot.writeString(self.Type.encode('utf-8') if sys.version_info[0] == 2 else self.Type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Parent is None:
            raise TProtocolException(message='Required field Parent is unset!')
        if self.Child is None:
            raise TProtocolException(message='Required field Child is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MAttachmentManipulation(object):
    """
    Attributes:
     - Parent
     - Child
     - AddRemove
     - Type

    """


    def __init__(self, Parent=None, Child=None, AddRemove=None, Type=None,):
        self.Parent = Parent
        self.Child = Child
        self.AddRemove = AddRemove
        self.Type = Type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Parent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Child = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.AddRemove = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.Type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MAttachmentManipulation')
        if self.Parent is not None:
            oprot.writeFieldBegin('Parent', TType.STRING, 1)
            oprot.writeString(self.Parent.encode('utf-8') if sys.version_info[0] == 2 else self.Parent)
            oprot.writeFieldEnd()
        if self.Child is not None:
            oprot.writeFieldBegin('Child', TType.STRING, 2)
            oprot.writeString(self.Child.encode('utf-8') if sys.version_info[0] == 2 else self.Child)
            oprot.writeFieldEnd()
        if self.AddRemove is not None:
            oprot.writeFieldBegin('AddRemove', TType.BOOL, 3)
            oprot.writeBool(self.AddRemove)
            oprot.writeFieldEnd()
        if self.Type is not None:
            oprot.writeFieldBegin('Type', TType.STRING, 4)
            oprot.writeString(self.Type.encode('utf-8') if sys.version_info[0] == 2 else self.Type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Parent is None:
            raise TProtocolException(message='Required field Parent is unset!')
        if self.Child is None:
            raise TProtocolException(message='Required field Child is unset!')
        if self.AddRemove is None:
            raise TProtocolException(message='Required field AddRemove is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MPropertyManipulation(object):
    """
    Attributes:
     - Target
     - Key
     - AddRemove
     - Value

    """


    def __init__(self, Target=None, Key=None, AddRemove=None, Value=None,):
        self.Target = Target
        self.Key = Key
        self.AddRemove = AddRemove
        self.Value = Value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Target = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.AddRemove = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.Value = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MPropertyManipulation')
        if self.Target is not None:
            oprot.writeFieldBegin('Target', TType.STRING, 1)
            oprot.writeString(self.Target.encode('utf-8') if sys.version_info[0] == 2 else self.Target)
            oprot.writeFieldEnd()
        if self.Key is not None:
            oprot.writeFieldBegin('Key', TType.STRING, 2)
            oprot.writeString(self.Key.encode('utf-8') if sys.version_info[0] == 2 else self.Key)
            oprot.writeFieldEnd()
        if self.AddRemove is not None:
            oprot.writeFieldBegin('AddRemove', TType.BOOL, 3)
            oprot.writeBool(self.AddRemove)
            oprot.writeFieldEnd()
        if self.Value is not None:
            oprot.writeFieldBegin('Value', TType.STRING, 4)
            oprot.writeString(self.Value.encode('utf-8') if sys.version_info[0] == 2 else self.Value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Target is None:
            raise TProtocolException(message='Required field Target is unset!')
        if self.Key is None:
            raise TProtocolException(message='Required field Key is unset!')
        if self.AddRemove is None:
            raise TProtocolException(message='Required field AddRemove is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MTransformUpdate(object):
    """
    Attributes:
     - Position
     - Rotation
     - Parent
     - Scale

    """


    def __init__(self, Position=None, Rotation=None, Parent=None, Scale=None,):
        self.Position = Position
        self.Rotation = Rotation
        self.Parent = Parent
        self.Scale = Scale

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.Position = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readDouble()
                        self.Position.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.Rotation = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readDouble()
                        self.Rotation.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Parent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.Scale = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readDouble()
                        self.Scale.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MTransformUpdate')
        if self.Position is not None:
            oprot.writeFieldBegin('Position', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.Position))
            for iter18 in self.Position:
                oprot.writeDouble(iter18)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Rotation is not None:
            oprot.writeFieldBegin('Rotation', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.Rotation))
            for iter19 in self.Rotation:
                oprot.writeDouble(iter19)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Parent is not None:
            oprot.writeFieldBegin('Parent', TType.STRING, 3)
            oprot.writeString(self.Parent.encode('utf-8') if sys.version_info[0] == 2 else self.Parent)
            oprot.writeFieldEnd()
        if self.Scale is not None:
            oprot.writeFieldBegin('Scale', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.Scale))
            for iter20 in self.Scale:
                oprot.writeDouble(iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MPropertyUpdate(object):
    """
    Attributes:
     - Key
     - Value

    """


    def __init__(self, Key=None, Value=None,):
        self.Key = Key
        self.Value = Value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Value = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MPropertyUpdate')
        if self.Key is not None:
            oprot.writeFieldBegin('Key', TType.STRING, 1)
            oprot.writeString(self.Key.encode('utf-8') if sys.version_info[0] == 2 else self.Key)
            oprot.writeFieldEnd()
        if self.Value is not None:
            oprot.writeFieldBegin('Value', TType.STRING, 2)
            oprot.writeString(self.Value.encode('utf-8') if sys.version_info[0] == 2 else self.Value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Key is None:
            raise TProtocolException(message='Required field Key is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MPhysicsProperties(object):
    """
    Attributes:
     - Mass
     - CenterOfMass
     - Inertia
     - Velocity
     - AngularVelocity
     - NetForce
     - NetTorque
     - Mu1
     - Mu2
     - Bounciness
     - MuTorsion
     - TorsionSurfaceRadius

    """


    def __init__(self, Mass=None, CenterOfMass=None, Inertia=None, Velocity=None, AngularVelocity=None, NetForce=None, NetTorque=None, Mu1=None, Mu2=None, Bounciness=None, MuTorsion=None, TorsionSurfaceRadius=None,):
        self.Mass = Mass
        self.CenterOfMass = CenterOfMass
        self.Inertia = Inertia
        self.Velocity = Velocity
        self.AngularVelocity = AngularVelocity
        self.NetForce = NetForce
        self.NetTorque = NetTorque
        self.Mu1 = Mu1
        self.Mu2 = Mu2
        self.Bounciness = Bounciness
        self.MuTorsion = MuTorsion
        self.TorsionSurfaceRadius = TorsionSurfaceRadius

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.Mass = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.CenterOfMass = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readDouble()
                        self.CenterOfMass.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.Inertia = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = iprot.readDouble()
                        self.Inertia.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.Velocity = []
                    (_etype36, _size33) = iprot.readListBegin()
                    for _i37 in range(_size33):
                        _elem38 = iprot.readDouble()
                        self.Velocity.append(_elem38)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.AngularVelocity = []
                    (_etype42, _size39) = iprot.readListBegin()
                    for _i43 in range(_size39):
                        _elem44 = iprot.readDouble()
                        self.AngularVelocity.append(_elem44)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.NetForce = []
                    (_etype48, _size45) = iprot.readListBegin()
                    for _i49 in range(_size45):
                        _elem50 = iprot.readDouble()
                        self.NetForce.append(_elem50)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.NetTorque = []
                    (_etype54, _size51) = iprot.readListBegin()
                    for _i55 in range(_size51):
                        _elem56 = iprot.readDouble()
                        self.NetTorque.append(_elem56)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.Mu1 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.Mu2 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.Bounciness = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.MuTorsion = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.DOUBLE:
                    self.TorsionSurfaceRadius = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MPhysicsProperties')
        if self.Mass is not None:
            oprot.writeFieldBegin('Mass', TType.DOUBLE, 1)
            oprot.writeDouble(self.Mass)
            oprot.writeFieldEnd()
        if self.CenterOfMass is not None:
            oprot.writeFieldBegin('CenterOfMass', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.CenterOfMass))
            for iter57 in self.CenterOfMass:
                oprot.writeDouble(iter57)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Inertia is not None:
            oprot.writeFieldBegin('Inertia', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.Inertia))
            for iter58 in self.Inertia:
                oprot.writeDouble(iter58)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Velocity is not None:
            oprot.writeFieldBegin('Velocity', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.Velocity))
            for iter59 in self.Velocity:
                oprot.writeDouble(iter59)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.AngularVelocity is not None:
            oprot.writeFieldBegin('AngularVelocity', TType.LIST, 5)
            oprot.writeListBegin(TType.DOUBLE, len(self.AngularVelocity))
            for iter60 in self.AngularVelocity:
                oprot.writeDouble(iter60)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.NetForce is not None:
            oprot.writeFieldBegin('NetForce', TType.LIST, 6)
            oprot.writeListBegin(TType.DOUBLE, len(self.NetForce))
            for iter61 in self.NetForce:
                oprot.writeDouble(iter61)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.NetTorque is not None:
            oprot.writeFieldBegin('NetTorque', TType.LIST, 7)
            oprot.writeListBegin(TType.DOUBLE, len(self.NetTorque))
            for iter62 in self.NetTorque:
                oprot.writeDouble(iter62)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Mu1 is not None:
            oprot.writeFieldBegin('Mu1', TType.DOUBLE, 8)
            oprot.writeDouble(self.Mu1)
            oprot.writeFieldEnd()
        if self.Mu2 is not None:
            oprot.writeFieldBegin('Mu2', TType.DOUBLE, 9)
            oprot.writeDouble(self.Mu2)
            oprot.writeFieldEnd()
        if self.Bounciness is not None:
            oprot.writeFieldBegin('Bounciness', TType.DOUBLE, 10)
            oprot.writeDouble(self.Bounciness)
            oprot.writeFieldEnd()
        if self.MuTorsion is not None:
            oprot.writeFieldBegin('MuTorsion', TType.DOUBLE, 11)
            oprot.writeDouble(self.MuTorsion)
            oprot.writeFieldEnd()
        if self.TorsionSurfaceRadius is not None:
            oprot.writeFieldBegin('TorsionSurfaceRadius', TType.DOUBLE, 12)
            oprot.writeDouble(self.TorsionSurfaceRadius)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Mass is None:
            raise TProtocolException(message='Required field Mass is unset!')
        if self.CenterOfMass is None:
            raise TProtocolException(message='Required field CenterOfMass is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MSphereColliderProperties(object):
    """
    Attributes:
     - Radius

    """


    def __init__(self, Radius=None,):
        self.Radius = Radius

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.Radius = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MSphereColliderProperties')
        if self.Radius is not None:
            oprot.writeFieldBegin('Radius', TType.DOUBLE, 1)
            oprot.writeDouble(self.Radius)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Radius is None:
            raise TProtocolException(message='Required field Radius is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MConeColliderProperties(object):
    """
    Attributes:
     - Radius
     - Height

    """


    def __init__(self, Radius=None, Height=None,):
        self.Radius = Radius
        self.Height = Height

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.Radius = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.Height = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MConeColliderProperties')
        if self.Radius is not None:
            oprot.writeFieldBegin('Radius', TType.DOUBLE, 1)
            oprot.writeDouble(self.Radius)
            oprot.writeFieldEnd()
        if self.Height is not None:
            oprot.writeFieldBegin('Height', TType.DOUBLE, 2)
            oprot.writeDouble(self.Height)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Radius is None:
            raise TProtocolException(message='Required field Radius is unset!')
        if self.Height is None:
            raise TProtocolException(message='Required field Height is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MCylinderColliderProperties(object):
    """
    Attributes:
     - Radius
     - Height

    """


    def __init__(self, Radius=None, Height=None,):
        self.Radius = Radius
        self.Height = Height

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.Radius = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.Height = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MCylinderColliderProperties')
        if self.Radius is not None:
            oprot.writeFieldBegin('Radius', TType.DOUBLE, 1)
            oprot.writeDouble(self.Radius)
            oprot.writeFieldEnd()
        if self.Height is not None:
            oprot.writeFieldBegin('Height', TType.DOUBLE, 2)
            oprot.writeDouble(self.Height)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Radius is None:
            raise TProtocolException(message='Required field Radius is unset!')
        if self.Height is None:
            raise TProtocolException(message='Required field Height is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MTransformManipulation(object):
    """
    Attributes:
     - Target
     - Position
     - Rotation
     - Parent

    """


    def __init__(self, Target=None, Position=None, Rotation=None, Parent=None,):
        self.Target = Target
        self.Position = Position
        self.Rotation = Rotation
        self.Parent = Parent

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Target = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.Position = MMIStandard.math.ttypes.MVector3()
                    self.Position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.Rotation = MMIStandard.math.ttypes.MQuaternion()
                    self.Rotation.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.Parent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MTransformManipulation')
        if self.Target is not None:
            oprot.writeFieldBegin('Target', TType.STRING, 1)
            oprot.writeString(self.Target.encode('utf-8') if sys.version_info[0] == 2 else self.Target)
            oprot.writeFieldEnd()
        if self.Position is not None:
            oprot.writeFieldBegin('Position', TType.STRUCT, 2)
            self.Position.write(oprot)
            oprot.writeFieldEnd()
        if self.Rotation is not None:
            oprot.writeFieldBegin('Rotation', TType.STRUCT, 3)
            self.Rotation.write(oprot)
            oprot.writeFieldEnd()
        if self.Parent is not None:
            oprot.writeFieldBegin('Parent', TType.STRING, 4)
            oprot.writeString(self.Parent.encode('utf-8') if sys.version_info[0] == 2 else self.Parent)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Target is None:
            raise TProtocolException(message='Required field Target is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MBoxColliderProperties(object):
    """
    Attributes:
     - Size

    """


    def __init__(self, Size=None,):
        self.Size = Size

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.Size = MMIStandard.math.ttypes.MVector3()
                    self.Size.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MBoxColliderProperties')
        if self.Size is not None:
            oprot.writeFieldBegin('Size', TType.STRUCT, 1)
            self.Size.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Size is None:
            raise TProtocolException(message='Required field Size is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MCapsuleColliderProperties(object):
    """
    Attributes:
     - Radius
     - Height
     - MainAxis

    """


    def __init__(self, Radius=None, Height=None, MainAxis=None,):
        self.Radius = Radius
        self.Height = Height
        self.MainAxis = MainAxis

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.Radius = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.Height = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.MainAxis = MMIStandard.math.ttypes.MVector3()
                    self.MainAxis.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MCapsuleColliderProperties')
        if self.Radius is not None:
            oprot.writeFieldBegin('Radius', TType.DOUBLE, 1)
            oprot.writeDouble(self.Radius)
            oprot.writeFieldEnd()
        if self.Height is not None:
            oprot.writeFieldBegin('Height', TType.DOUBLE, 2)
            oprot.writeDouble(self.Height)
            oprot.writeFieldEnd()
        if self.MainAxis is not None:
            oprot.writeFieldBegin('MainAxis', TType.STRUCT, 3)
            self.MainAxis.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Radius is None:
            raise TProtocolException(message='Required field Radius is unset!')
        if self.Height is None:
            raise TProtocolException(message='Required field Height is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MMeshColliderProperties(object):
    """
    Attributes:
     - Vertices
     - Triangles

    """


    def __init__(self, Vertices=None, Triangles=None,):
        self.Vertices = Vertices
        self.Triangles = Triangles

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.Vertices = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = MMIStandard.math.ttypes.MVector3()
                        _elem68.read(iprot)
                        self.Vertices.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.Triangles = []
                    (_etype72, _size69) = iprot.readListBegin()
                    for _i73 in range(_size69):
                        _elem74 = iprot.readI32()
                        self.Triangles.append(_elem74)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MMeshColliderProperties')
        if self.Vertices is not None:
            oprot.writeFieldBegin('Vertices', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.Vertices))
            for iter75 in self.Vertices:
                iter75.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Triangles is not None:
            oprot.writeFieldBegin('Triangles', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.Triangles))
            for iter76 in self.Triangles:
                oprot.writeI32(iter76)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Vertices is None:
            raise TProtocolException(message='Required field Vertices is unset!')
        if self.Triangles is None:
            raise TProtocolException(message='Required field Triangles is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MMesh(object):
    """
    Attributes:
     - ID
     - Vertices
     - Triangles
     - UVCoordinates
     - Properties

    """


    def __init__(self, ID=None, Vertices=None, Triangles=None, UVCoordinates=None, Properties=None,):
        self.ID = ID
        self.Vertices = Vertices
        self.Triangles = Triangles
        self.UVCoordinates = UVCoordinates
        self.Properties = Properties

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.Vertices = []
                    (_etype80, _size77) = iprot.readListBegin()
                    for _i81 in range(_size77):
                        _elem82 = MMIStandard.math.ttypes.MVector3()
                        _elem82.read(iprot)
                        self.Vertices.append(_elem82)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.Triangles = []
                    (_etype86, _size83) = iprot.readListBegin()
                    for _i87 in range(_size83):
                        _elem88 = iprot.readI32()
                        self.Triangles.append(_elem88)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.UVCoordinates = []
                    (_etype92, _size89) = iprot.readListBegin()
                    for _i93 in range(_size89):
                        _elem94 = MMIStandard.math.ttypes.MVector2()
                        _elem94.read(iprot)
                        self.UVCoordinates.append(_elem94)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.Properties = {}
                    (_ktype96, _vtype97, _size95) = iprot.readMapBegin()
                    for _i99 in range(_size95):
                        _key100 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val101 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.Properties[_key100] = _val101
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MMesh')
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 1)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.Vertices is not None:
            oprot.writeFieldBegin('Vertices', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.Vertices))
            for iter102 in self.Vertices:
                iter102.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Triangles is not None:
            oprot.writeFieldBegin('Triangles', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.Triangles))
            for iter103 in self.Triangles:
                oprot.writeI32(iter103)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.UVCoordinates is not None:
            oprot.writeFieldBegin('UVCoordinates', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.UVCoordinates))
            for iter104 in self.UVCoordinates:
                iter104.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Properties is not None:
            oprot.writeFieldBegin('Properties', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.Properties))
            for kiter105, viter106 in self.Properties.items():
                oprot.writeString(kiter105.encode('utf-8') if sys.version_info[0] == 2 else kiter105)
                oprot.writeString(viter106.encode('utf-8') if sys.version_info[0] == 2 else viter106)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ID is None:
            raise TProtocolException(message='Required field ID is unset!')
        if self.Vertices is None:
            raise TProtocolException(message='Required field Vertices is unset!')
        if self.Triangles is None:
            raise TProtocolException(message='Required field Triangles is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MNavigationMesh(object):
    """
    Attributes:
     - Vertices
     - Triangles
     - Properties

    """


    def __init__(self, Vertices=None, Triangles=None, Properties=None,):
        self.Vertices = Vertices
        self.Triangles = Triangles
        self.Properties = Properties

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.Vertices = []
                    (_etype110, _size107) = iprot.readListBegin()
                    for _i111 in range(_size107):
                        _elem112 = MMIStandard.math.ttypes.MVector3()
                        _elem112.read(iprot)
                        self.Vertices.append(_elem112)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.Triangles = []
                    (_etype116, _size113) = iprot.readListBegin()
                    for _i117 in range(_size113):
                        _elem118 = iprot.readI32()
                        self.Triangles.append(_elem118)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.Properties = {}
                    (_ktype120, _vtype121, _size119) = iprot.readMapBegin()
                    for _i123 in range(_size119):
                        _key124 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val125 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.Properties[_key124] = _val125
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MNavigationMesh')
        if self.Vertices is not None:
            oprot.writeFieldBegin('Vertices', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.Vertices))
            for iter126 in self.Vertices:
                iter126.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Triangles is not None:
            oprot.writeFieldBegin('Triangles', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.Triangles))
            for iter127 in self.Triangles:
                oprot.writeI32(iter127)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Properties is not None:
            oprot.writeFieldBegin('Properties', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.Properties))
            for kiter128, viter129 in self.Properties.items():
                oprot.writeString(kiter128.encode('utf-8') if sys.version_info[0] == 2 else kiter128)
                oprot.writeString(viter129.encode('utf-8') if sys.version_info[0] == 2 else viter129)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Vertices is None:
            raise TProtocolException(message='Required field Vertices is unset!')
        if self.Triangles is None:
            raise TProtocolException(message='Required field Triangles is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MDrawingCall(object):
    """
    Attributes:
     - Type
     - Data
     - Properties

    """


    def __init__(self, Type=None, Data=None, Properties=None,):
        self.Type = Type
        self.Data = Data
        self.Properties = Properties

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.Type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.Data = []
                    (_etype133, _size130) = iprot.readListBegin()
                    for _i134 in range(_size130):
                        _elem135 = iprot.readDouble()
                        self.Data.append(_elem135)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.Properties = {}
                    (_ktype137, _vtype138, _size136) = iprot.readMapBegin()
                    for _i140 in range(_size136):
                        _key141 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val142 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.Properties[_key141] = _val142
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MDrawingCall')
        if self.Type is not None:
            oprot.writeFieldBegin('Type', TType.I32, 1)
            oprot.writeI32(self.Type)
            oprot.writeFieldEnd()
        if self.Data is not None:
            oprot.writeFieldBegin('Data', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.Data))
            for iter143 in self.Data:
                oprot.writeDouble(iter143)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Properties is not None:
            oprot.writeFieldBegin('Properties', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.Properties))
            for kiter144, viter145 in self.Properties.items():
                oprot.writeString(kiter144.encode('utf-8') if sys.version_info[0] == 2 else kiter144)
                oprot.writeString(viter145.encode('utf-8') if sys.version_info[0] == 2 else viter145)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Type is None:
            raise TProtocolException(message='Required field Type is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MPhysicsInteraction(object):
    """
    Attributes:
     - Target
     - Type
     - Values
     - Properties

    """


    def __init__(self, Target=None, Type=None, Values=None, Properties=None,):
        self.Target = Target
        self.Type = Type
        self.Values = Values
        self.Properties = Properties

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Target = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.Type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.Values = []
                    (_etype149, _size146) = iprot.readListBegin()
                    for _i150 in range(_size146):
                        _elem151 = iprot.readDouble()
                        self.Values.append(_elem151)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.Properties = {}
                    (_ktype153, _vtype154, _size152) = iprot.readMapBegin()
                    for _i156 in range(_size152):
                        _key157 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val158 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.Properties[_key157] = _val158
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MPhysicsInteraction')
        if self.Target is not None:
            oprot.writeFieldBegin('Target', TType.STRING, 1)
            oprot.writeString(self.Target.encode('utf-8') if sys.version_info[0] == 2 else self.Target)
            oprot.writeFieldEnd()
        if self.Type is not None:
            oprot.writeFieldBegin('Type', TType.I32, 2)
            oprot.writeI32(self.Type)
            oprot.writeFieldEnd()
        if self.Values is not None:
            oprot.writeFieldBegin('Values', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.Values))
            for iter159 in self.Values:
                oprot.writeDouble(iter159)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Properties is not None:
            oprot.writeFieldBegin('Properties', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.Properties))
            for kiter160, viter161 in self.Properties.items():
                oprot.writeString(kiter160.encode('utf-8') if sys.version_info[0] == 2 else kiter160)
                oprot.writeString(viter161.encode('utf-8') if sys.version_info[0] == 2 else viter161)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Target is None:
            raise TProtocolException(message='Required field Target is unset!')
        if self.Type is None:
            raise TProtocolException(message='Required field Type is unset!')
        if self.Values is None:
            raise TProtocolException(message='Required field Values is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MSceneManipulation(object):
    """
    Attributes:
     - Transforms
     - PhysicsInteractions
     - Properties
     - Attachments

    """


    def __init__(self, Transforms=None, PhysicsInteractions=None, Properties=None, Attachments=None,):
        self.Transforms = Transforms
        self.PhysicsInteractions = PhysicsInteractions
        self.Properties = Properties
        self.Attachments = Attachments

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.Transforms = []
                    (_etype165, _size162) = iprot.readListBegin()
                    for _i166 in range(_size162):
                        _elem167 = MTransformManipulation()
                        _elem167.read(iprot)
                        self.Transforms.append(_elem167)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.PhysicsInteractions = []
                    (_etype171, _size168) = iprot.readListBegin()
                    for _i172 in range(_size168):
                        _elem173 = MPhysicsInteraction()
                        _elem173.read(iprot)
                        self.PhysicsInteractions.append(_elem173)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.Properties = []
                    (_etype177, _size174) = iprot.readListBegin()
                    for _i178 in range(_size174):
                        _elem179 = MPropertyManipulation()
                        _elem179.read(iprot)
                        self.Properties.append(_elem179)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.Attachments = []
                    (_etype183, _size180) = iprot.readListBegin()
                    for _i184 in range(_size180):
                        _elem185 = MAttachmentManipulation()
                        _elem185.read(iprot)
                        self.Attachments.append(_elem185)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MSceneManipulation')
        if self.Transforms is not None:
            oprot.writeFieldBegin('Transforms', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.Transforms))
            for iter186 in self.Transforms:
                iter186.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.PhysicsInteractions is not None:
            oprot.writeFieldBegin('PhysicsInteractions', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.PhysicsInteractions))
            for iter187 in self.PhysicsInteractions:
                iter187.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Properties is not None:
            oprot.writeFieldBegin('Properties', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.Properties))
            for iter188 in self.Properties:
                iter188.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Attachments is not None:
            oprot.writeFieldBegin('Attachments', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.Attachments))
            for iter189 in self.Attachments:
                iter189.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MCollider(object):
    """
    Attributes:
     - ID
     - Type
     - BoxColliderProperties
     - SphereColliderProperties
     - CapsuleColliderProperties
     - ConeColliderProperties
     - CylinderColliderProperties
     - MeshColliderProperties
     - PositionOffset
     - RotationOffset
     - Colliders
     - Properties

    """


    def __init__(self, ID=None, Type=None, BoxColliderProperties=None, SphereColliderProperties=None, CapsuleColliderProperties=None, ConeColliderProperties=None, CylinderColliderProperties=None, MeshColliderProperties=None, PositionOffset=None, RotationOffset=None, Colliders=None, Properties=None,):
        self.ID = ID
        self.Type = Type
        self.BoxColliderProperties = BoxColliderProperties
        self.SphereColliderProperties = SphereColliderProperties
        self.CapsuleColliderProperties = CapsuleColliderProperties
        self.ConeColliderProperties = ConeColliderProperties
        self.CylinderColliderProperties = CylinderColliderProperties
        self.MeshColliderProperties = MeshColliderProperties
        self.PositionOffset = PositionOffset
        self.RotationOffset = RotationOffset
        self.Colliders = Colliders
        self.Properties = Properties

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.Type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.BoxColliderProperties = MBoxColliderProperties()
                    self.BoxColliderProperties.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.SphereColliderProperties = MSphereColliderProperties()
                    self.SphereColliderProperties.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.CapsuleColliderProperties = MCapsuleColliderProperties()
                    self.CapsuleColliderProperties.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.ConeColliderProperties = MConeColliderProperties()
                    self.ConeColliderProperties.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.CylinderColliderProperties = MCylinderColliderProperties()
                    self.CylinderColliderProperties.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.MeshColliderProperties = MMeshColliderProperties()
                    self.MeshColliderProperties.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.PositionOffset = MMIStandard.math.ttypes.MVector3()
                    self.PositionOffset.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.RotationOffset = MMIStandard.math.ttypes.MQuaternion()
                    self.RotationOffset.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.Colliders = []
                    (_etype193, _size190) = iprot.readListBegin()
                    for _i194 in range(_size190):
                        _elem195 = MCollider()
                        _elem195.read(iprot)
                        self.Colliders.append(_elem195)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.MAP:
                    self.Properties = {}
                    (_ktype197, _vtype198, _size196) = iprot.readMapBegin()
                    for _i200 in range(_size196):
                        _key201 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val202 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.Properties[_key201] = _val202
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MCollider')
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 1)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.Type is not None:
            oprot.writeFieldBegin('Type', TType.I32, 2)
            oprot.writeI32(self.Type)
            oprot.writeFieldEnd()
        if self.BoxColliderProperties is not None:
            oprot.writeFieldBegin('BoxColliderProperties', TType.STRUCT, 3)
            self.BoxColliderProperties.write(oprot)
            oprot.writeFieldEnd()
        if self.SphereColliderProperties is not None:
            oprot.writeFieldBegin('SphereColliderProperties', TType.STRUCT, 4)
            self.SphereColliderProperties.write(oprot)
            oprot.writeFieldEnd()
        if self.CapsuleColliderProperties is not None:
            oprot.writeFieldBegin('CapsuleColliderProperties', TType.STRUCT, 5)
            self.CapsuleColliderProperties.write(oprot)
            oprot.writeFieldEnd()
        if self.ConeColliderProperties is not None:
            oprot.writeFieldBegin('ConeColliderProperties', TType.STRUCT, 6)
            self.ConeColliderProperties.write(oprot)
            oprot.writeFieldEnd()
        if self.CylinderColliderProperties is not None:
            oprot.writeFieldBegin('CylinderColliderProperties', TType.STRUCT, 7)
            self.CylinderColliderProperties.write(oprot)
            oprot.writeFieldEnd()
        if self.MeshColliderProperties is not None:
            oprot.writeFieldBegin('MeshColliderProperties', TType.STRUCT, 8)
            self.MeshColliderProperties.write(oprot)
            oprot.writeFieldEnd()
        if self.PositionOffset is not None:
            oprot.writeFieldBegin('PositionOffset', TType.STRUCT, 9)
            self.PositionOffset.write(oprot)
            oprot.writeFieldEnd()
        if self.RotationOffset is not None:
            oprot.writeFieldBegin('RotationOffset', TType.STRUCT, 10)
            self.RotationOffset.write(oprot)
            oprot.writeFieldEnd()
        if self.Colliders is not None:
            oprot.writeFieldBegin('Colliders', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.Colliders))
            for iter203 in self.Colliders:
                iter203.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Properties is not None:
            oprot.writeFieldBegin('Properties', TType.MAP, 12)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.Properties))
            for kiter204, viter205 in self.Properties.items():
                oprot.writeString(kiter204.encode('utf-8') if sys.version_info[0] == 2 else kiter204)
                oprot.writeString(viter205.encode('utf-8') if sys.version_info[0] == 2 else viter205)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ID is None:
            raise TProtocolException(message='Required field ID is unset!')
        if self.Type is None:
            raise TProtocolException(message='Required field Type is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MSceneObject(object):
    """
    Attributes:
     - ID
     - Name
     - Transform
     - Collider
     - Mesh
     - PhysicsProperties
     - Properties
     - Attachments
     - Constraints

    """


    def __init__(self, ID=None, Name=None, Transform=None, Collider=None, Mesh=None, PhysicsProperties=None, Properties=None, Attachments=None, Constraints=None,):
        self.ID = ID
        self.Name = Name
        self.Transform = Transform
        self.Collider = Collider
        self.Mesh = Mesh
        self.PhysicsProperties = PhysicsProperties
        self.Properties = Properties
        self.Attachments = Attachments
        self.Constraints = Constraints

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.Transform = MMIStandard.math.ttypes.MTransform()
                    self.Transform.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.Collider = MCollider()
                    self.Collider.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.Mesh = MMesh()
                    self.Mesh.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.PhysicsProperties = MPhysicsProperties()
                    self.PhysicsProperties.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.Properties = {}
                    (_ktype207, _vtype208, _size206) = iprot.readMapBegin()
                    for _i210 in range(_size206):
                        _key211 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val212 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.Properties[_key211] = _val212
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.Attachments = []
                    (_etype216, _size213) = iprot.readListBegin()
                    for _i217 in range(_size213):
                        _elem218 = MAttachment()
                        _elem218.read(iprot)
                        self.Attachments.append(_elem218)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.Constraints = []
                    (_etype222, _size219) = iprot.readListBegin()
                    for _i223 in range(_size219):
                        _elem224 = MMIStandard.constraints.ttypes.MConstraint()
                        _elem224.read(iprot)
                        self.Constraints.append(_elem224)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MSceneObject')
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 1)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Transform is not None:
            oprot.writeFieldBegin('Transform', TType.STRUCT, 3)
            self.Transform.write(oprot)
            oprot.writeFieldEnd()
        if self.Collider is not None:
            oprot.writeFieldBegin('Collider', TType.STRUCT, 4)
            self.Collider.write(oprot)
            oprot.writeFieldEnd()
        if self.Mesh is not None:
            oprot.writeFieldBegin('Mesh', TType.STRUCT, 5)
            self.Mesh.write(oprot)
            oprot.writeFieldEnd()
        if self.PhysicsProperties is not None:
            oprot.writeFieldBegin('PhysicsProperties', TType.STRUCT, 6)
            self.PhysicsProperties.write(oprot)
            oprot.writeFieldEnd()
        if self.Properties is not None:
            oprot.writeFieldBegin('Properties', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.Properties))
            for kiter225, viter226 in self.Properties.items():
                oprot.writeString(kiter225.encode('utf-8') if sys.version_info[0] == 2 else kiter225)
                oprot.writeString(viter226.encode('utf-8') if sys.version_info[0] == 2 else viter226)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.Attachments is not None:
            oprot.writeFieldBegin('Attachments', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.Attachments))
            for iter227 in self.Attachments:
                iter227.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Constraints is not None:
            oprot.writeFieldBegin('Constraints', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.Constraints))
            for iter228 in self.Constraints:
                iter228.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ID is None:
            raise TProtocolException(message='Required field ID is unset!')
        if self.Name is None:
            raise TProtocolException(message='Required field Name is unset!')
        if self.Transform is None:
            raise TProtocolException(message='Required field Transform is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MSceneObjectUpdate(object):
    """
    Attributes:
     - ID
     - Name
     - Transform
     - Collider
     - Mesh
     - PhysicsProperties
     - HandPoses
     - Properties
     - Attachments
     - Constraints

    """


    def __init__(self, ID=None, Name=None, Transform=None, Collider=None, Mesh=None, PhysicsProperties=None, HandPoses=None, Properties=None, Attachments=None, Constraints=None,):
        self.ID = ID
        self.Name = Name
        self.Transform = Transform
        self.Collider = Collider
        self.Mesh = Mesh
        self.PhysicsProperties = PhysicsProperties
        self.HandPoses = HandPoses
        self.Properties = Properties
        self.Attachments = Attachments
        self.Constraints = Constraints

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.Transform = MTransformUpdate()
                    self.Transform.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.Collider = MCollider()
                    self.Collider.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.Mesh = MMesh()
                    self.Mesh.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.PhysicsProperties = MPhysicsProperties()
                    self.PhysicsProperties.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.HandPoses = []
                    (_etype232, _size229) = iprot.readListBegin()
                    for _i233 in range(_size229):
                        _elem234 = MMIStandard.avatar.ttypes.MHandPose()
                        _elem234.read(iprot)
                        self.HandPoses.append(_elem234)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.Properties = []
                    (_etype238, _size235) = iprot.readListBegin()
                    for _i239 in range(_size235):
                        _elem240 = MPropertyUpdate()
                        _elem240.read(iprot)
                        self.Properties.append(_elem240)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.Attachments = []
                    (_etype244, _size241) = iprot.readListBegin()
                    for _i245 in range(_size241):
                        _elem246 = MAttachment()
                        _elem246.read(iprot)
                        self.Attachments.append(_elem246)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.Constraints = []
                    (_etype250, _size247) = iprot.readListBegin()
                    for _i251 in range(_size247):
                        _elem252 = MMIStandard.constraints.ttypes.MConstraint()
                        _elem252.read(iprot)
                        self.Constraints.append(_elem252)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MSceneObjectUpdate')
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 1)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        if self.Transform is not None:
            oprot.writeFieldBegin('Transform', TType.STRUCT, 3)
            self.Transform.write(oprot)
            oprot.writeFieldEnd()
        if self.Collider is not None:
            oprot.writeFieldBegin('Collider', TType.STRUCT, 4)
            self.Collider.write(oprot)
            oprot.writeFieldEnd()
        if self.Mesh is not None:
            oprot.writeFieldBegin('Mesh', TType.STRUCT, 5)
            self.Mesh.write(oprot)
            oprot.writeFieldEnd()
        if self.PhysicsProperties is not None:
            oprot.writeFieldBegin('PhysicsProperties', TType.STRUCT, 6)
            self.PhysicsProperties.write(oprot)
            oprot.writeFieldEnd()
        if self.HandPoses is not None:
            oprot.writeFieldBegin('HandPoses', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.HandPoses))
            for iter253 in self.HandPoses:
                iter253.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Properties is not None:
            oprot.writeFieldBegin('Properties', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.Properties))
            for iter254 in self.Properties:
                iter254.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Attachments is not None:
            oprot.writeFieldBegin('Attachments', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.Attachments))
            for iter255 in self.Attachments:
                iter255.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Constraints is not None:
            oprot.writeFieldBegin('Constraints', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.Constraints))
            for iter256 in self.Constraints:
                iter256.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ID is None:
            raise TProtocolException(message='Required field ID is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MSceneUpdate(object):
    """
    Attributes:
     - AddedSceneObjects
     - ChangedSceneObjects
     - RemovedSceneObjects
     - AddedAvatars
     - ChangedAvatars
     - RemovedAvatars

    """


    def __init__(self, AddedSceneObjects=None, ChangedSceneObjects=None, RemovedSceneObjects=None, AddedAvatars=None, ChangedAvatars=None, RemovedAvatars=None,):
        self.AddedSceneObjects = AddedSceneObjects
        self.ChangedSceneObjects = ChangedSceneObjects
        self.RemovedSceneObjects = RemovedSceneObjects
        self.AddedAvatars = AddedAvatars
        self.ChangedAvatars = ChangedAvatars
        self.RemovedAvatars = RemovedAvatars

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.AddedSceneObjects = []
                    (_etype260, _size257) = iprot.readListBegin()
                    for _i261 in range(_size257):
                        _elem262 = MSceneObject()
                        _elem262.read(iprot)
                        self.AddedSceneObjects.append(_elem262)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.ChangedSceneObjects = []
                    (_etype266, _size263) = iprot.readListBegin()
                    for _i267 in range(_size263):
                        _elem268 = MSceneObjectUpdate()
                        _elem268.read(iprot)
                        self.ChangedSceneObjects.append(_elem268)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.RemovedSceneObjects = []
                    (_etype272, _size269) = iprot.readListBegin()
                    for _i273 in range(_size269):
                        _elem274 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.RemovedSceneObjects.append(_elem274)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.AddedAvatars = []
                    (_etype278, _size275) = iprot.readListBegin()
                    for _i279 in range(_size275):
                        _elem280 = MMIStandard.avatar.ttypes.MAvatar()
                        _elem280.read(iprot)
                        self.AddedAvatars.append(_elem280)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.ChangedAvatars = []
                    (_etype284, _size281) = iprot.readListBegin()
                    for _i285 in range(_size281):
                        _elem286 = MAvatarUpdate()
                        _elem286.read(iprot)
                        self.ChangedAvatars.append(_elem286)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.RemovedAvatars = []
                    (_etype290, _size287) = iprot.readListBegin()
                    for _i291 in range(_size287):
                        _elem292 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.RemovedAvatars.append(_elem292)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MSceneUpdate')
        if self.AddedSceneObjects is not None:
            oprot.writeFieldBegin('AddedSceneObjects', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.AddedSceneObjects))
            for iter293 in self.AddedSceneObjects:
                iter293.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ChangedSceneObjects is not None:
            oprot.writeFieldBegin('ChangedSceneObjects', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.ChangedSceneObjects))
            for iter294 in self.ChangedSceneObjects:
                iter294.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.RemovedSceneObjects is not None:
            oprot.writeFieldBegin('RemovedSceneObjects', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.RemovedSceneObjects))
            for iter295 in self.RemovedSceneObjects:
                oprot.writeString(iter295.encode('utf-8') if sys.version_info[0] == 2 else iter295)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.AddedAvatars is not None:
            oprot.writeFieldBegin('AddedAvatars', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.AddedAvatars))
            for iter296 in self.AddedAvatars:
                iter296.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ChangedAvatars is not None:
            oprot.writeFieldBegin('ChangedAvatars', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.ChangedAvatars))
            for iter297 in self.ChangedAvatars:
                iter297.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.RemovedAvatars is not None:
            oprot.writeFieldBegin('RemovedAvatars', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.RemovedAvatars))
            for iter298 in self.RemovedAvatars:
                oprot.writeString(iter298.encode('utf-8') if sys.version_info[0] == 2 else iter298)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MAvatarUpdate(object):
    """
    Attributes:
     - ID
     - PostureValues
     - SceneObjects
     - Description
     - Properties

    """


    def __init__(self, ID=None, PostureValues=None, SceneObjects=None, Description=None, Properties=None,):
        self.ID = ID
        self.PostureValues = PostureValues
        self.SceneObjects = SceneObjects
        self.Description = Description
        self.Properties = Properties

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.PostureValues = MMIStandard.avatar.ttypes.MAvatarPostureValues()
                    self.PostureValues.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.SceneObjects = []
                    (_etype302, _size299) = iprot.readListBegin()
                    for _i303 in range(_size299):
                        _elem304 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.SceneObjects.append(_elem304)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.Description = MMIStandard.avatar.ttypes.MAvatarDescription()
                    self.Description.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.Properties = []
                    (_etype308, _size305) = iprot.readListBegin()
                    for _i309 in range(_size305):
                        _elem310 = MPropertyUpdate()
                        _elem310.read(iprot)
                        self.Properties.append(_elem310)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MAvatarUpdate')
        if self.ID is not None:
            oprot.writeFieldBegin('ID', TType.STRING, 1)
            oprot.writeString(self.ID.encode('utf-8') if sys.version_info[0] == 2 else self.ID)
            oprot.writeFieldEnd()
        if self.PostureValues is not None:
            oprot.writeFieldBegin('PostureValues', TType.STRUCT, 2)
            self.PostureValues.write(oprot)
            oprot.writeFieldEnd()
        if self.SceneObjects is not None:
            oprot.writeFieldBegin('SceneObjects', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.SceneObjects))
            for iter311 in self.SceneObjects:
                oprot.writeString(iter311.encode('utf-8') if sys.version_info[0] == 2 else iter311)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Description is not None:
            oprot.writeFieldBegin('Description', TType.STRUCT, 4)
            self.Description.write(oprot)
            oprot.writeFieldEnd()
        if self.Properties is not None:
            oprot.writeFieldBegin('Properties', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.Properties))
            for iter312 in self.Properties:
                iter312.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ID is None:
            raise TProtocolException(message='Required field ID is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(MAttachment)
MAttachment.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Parent', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Child', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'Type', 'UTF8', None, ),  # 3
)
all_structs.append(MAttachmentManipulation)
MAttachmentManipulation.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Parent', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Child', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'AddRemove', None, None, ),  # 3
    (4, TType.STRING, 'Type', 'UTF8', None, ),  # 4
)
all_structs.append(MPropertyManipulation)
MPropertyManipulation.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Target', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Key', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'AddRemove', None, None, ),  # 3
    (4, TType.STRING, 'Value', 'UTF8', None, ),  # 4
)
all_structs.append(MTransformUpdate)
MTransformUpdate.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'Position', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.LIST, 'Rotation', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.STRING, 'Parent', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'Scale', (TType.DOUBLE, None, False), None, ),  # 4
)
all_structs.append(MPropertyUpdate)
MPropertyUpdate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Key', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Value', 'UTF8', None, ),  # 2
)
all_structs.append(MPhysicsProperties)
MPhysicsProperties.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'Mass', None, None, ),  # 1
    (2, TType.LIST, 'CenterOfMass', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.LIST, 'Inertia', (TType.DOUBLE, None, False), None, ),  # 3
    (4, TType.LIST, 'Velocity', (TType.DOUBLE, None, False), None, ),  # 4
    (5, TType.LIST, 'AngularVelocity', (TType.DOUBLE, None, False), None, ),  # 5
    (6, TType.LIST, 'NetForce', (TType.DOUBLE, None, False), None, ),  # 6
    (7, TType.LIST, 'NetTorque', (TType.DOUBLE, None, False), None, ),  # 7
    (8, TType.DOUBLE, 'Mu1', None, None, ),  # 8
    (9, TType.DOUBLE, 'Mu2', None, None, ),  # 9
    (10, TType.DOUBLE, 'Bounciness', None, None, ),  # 10
    (11, TType.DOUBLE, 'MuTorsion', None, None, ),  # 11
    (12, TType.DOUBLE, 'TorsionSurfaceRadius', None, None, ),  # 12
)
all_structs.append(MSphereColliderProperties)
MSphereColliderProperties.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'Radius', None, None, ),  # 1
)
all_structs.append(MConeColliderProperties)
MConeColliderProperties.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'Radius', None, None, ),  # 1
    (2, TType.DOUBLE, 'Height', None, None, ),  # 2
)
all_structs.append(MCylinderColliderProperties)
MCylinderColliderProperties.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'Radius', None, None, ),  # 1
    (2, TType.DOUBLE, 'Height', None, None, ),  # 2
)
all_structs.append(MTransformManipulation)
MTransformManipulation.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Target', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'Position', [MMIStandard.math.ttypes.MVector3, None], None, ),  # 2
    (3, TType.STRUCT, 'Rotation', [MMIStandard.math.ttypes.MQuaternion, None], None, ),  # 3
    (4, TType.STRING, 'Parent', 'UTF8', None, ),  # 4
)
all_structs.append(MBoxColliderProperties)
MBoxColliderProperties.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'Size', [MMIStandard.math.ttypes.MVector3, None], None, ),  # 1
)
all_structs.append(MCapsuleColliderProperties)
MCapsuleColliderProperties.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'Radius', None, None, ),  # 1
    (2, TType.DOUBLE, 'Height', None, None, ),  # 2
    (3, TType.STRUCT, 'MainAxis', [MMIStandard.math.ttypes.MVector3, None], None, ),  # 3
)
all_structs.append(MMeshColliderProperties)
MMeshColliderProperties.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'Vertices', (TType.STRUCT, [MMIStandard.math.ttypes.MVector3, None], False), None, ),  # 1
    (2, TType.LIST, 'Triangles', (TType.I32, None, False), None, ),  # 2
)
all_structs.append(MMesh)
MMesh.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ID', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'Vertices', (TType.STRUCT, [MMIStandard.math.ttypes.MVector3, None], False), None, ),  # 2
    (3, TType.LIST, 'Triangles', (TType.I32, None, False), None, ),  # 3
    (4, TType.LIST, 'UVCoordinates', (TType.STRUCT, [MMIStandard.math.ttypes.MVector2, None], False), None, ),  # 4
    (5, TType.MAP, 'Properties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 5
)
all_structs.append(MNavigationMesh)
MNavigationMesh.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'Vertices', (TType.STRUCT, [MMIStandard.math.ttypes.MVector3, None], False), None, ),  # 1
    (2, TType.LIST, 'Triangles', (TType.I32, None, False), None, ),  # 2
    (3, TType.MAP, 'Properties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(MDrawingCall)
MDrawingCall.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'Type', None, None, ),  # 1
    (2, TType.LIST, 'Data', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.MAP, 'Properties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(MPhysicsInteraction)
MPhysicsInteraction.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Target', 'UTF8', None, ),  # 1
    (2, TType.I32, 'Type', None, None, ),  # 2
    (3, TType.LIST, 'Values', (TType.DOUBLE, None, False), None, ),  # 3
    (4, TType.MAP, 'Properties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 4
)
all_structs.append(MSceneManipulation)
MSceneManipulation.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'Transforms', (TType.STRUCT, [MTransformManipulation, None], False), None, ),  # 1
    (2, TType.LIST, 'PhysicsInteractions', (TType.STRUCT, [MPhysicsInteraction, None], False), None, ),  # 2
    (3, TType.LIST, 'Properties', (TType.STRUCT, [MPropertyManipulation, None], False), None, ),  # 3
    (4, TType.LIST, 'Attachments', (TType.STRUCT, [MAttachmentManipulation, None], False), None, ),  # 4
)
all_structs.append(MCollider)
MCollider.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ID', 'UTF8', None, ),  # 1
    (2, TType.I32, 'Type', None, None, ),  # 2
    (3, TType.STRUCT, 'BoxColliderProperties', [MBoxColliderProperties, None], None, ),  # 3
    (4, TType.STRUCT, 'SphereColliderProperties', [MSphereColliderProperties, None], None, ),  # 4
    (5, TType.STRUCT, 'CapsuleColliderProperties', [MCapsuleColliderProperties, None], None, ),  # 5
    (6, TType.STRUCT, 'ConeColliderProperties', [MConeColliderProperties, None], None, ),  # 6
    (7, TType.STRUCT, 'CylinderColliderProperties', [MCylinderColliderProperties, None], None, ),  # 7
    (8, TType.STRUCT, 'MeshColliderProperties', [MMeshColliderProperties, None], None, ),  # 8
    (9, TType.STRUCT, 'PositionOffset', [MMIStandard.math.ttypes.MVector3, None], None, ),  # 9
    (10, TType.STRUCT, 'RotationOffset', [MMIStandard.math.ttypes.MQuaternion, None], None, ),  # 10
    (11, TType.LIST, 'Colliders', (TType.STRUCT, [MCollider, None], False), None, ),  # 11
    (12, TType.MAP, 'Properties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 12
)
all_structs.append(MSceneObject)
MSceneObject.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'Transform', [MMIStandard.math.ttypes.MTransform, None], None, ),  # 3
    (4, TType.STRUCT, 'Collider', [MCollider, None], None, ),  # 4
    (5, TType.STRUCT, 'Mesh', [MMesh, None], None, ),  # 5
    (6, TType.STRUCT, 'PhysicsProperties', [MPhysicsProperties, None], None, ),  # 6
    None,  # 7
    (8, TType.MAP, 'Properties', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 8
    (9, TType.LIST, 'Attachments', (TType.STRUCT, [MAttachment, None], False), None, ),  # 9
    (10, TType.LIST, 'Constraints', (TType.STRUCT, [MMIStandard.constraints.ttypes.MConstraint, None], False), None, ),  # 10
)
all_structs.append(MSceneObjectUpdate)
MSceneObjectUpdate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ID', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'Transform', [MTransformUpdate, None], None, ),  # 3
    (4, TType.STRUCT, 'Collider', [MCollider, None], None, ),  # 4
    (5, TType.STRUCT, 'Mesh', [MMesh, None], None, ),  # 5
    (6, TType.STRUCT, 'PhysicsProperties', [MPhysicsProperties, None], None, ),  # 6
    (7, TType.LIST, 'HandPoses', (TType.STRUCT, [MMIStandard.avatar.ttypes.MHandPose, None], False), None, ),  # 7
    (8, TType.LIST, 'Properties', (TType.STRUCT, [MPropertyUpdate, None], False), None, ),  # 8
    (9, TType.LIST, 'Attachments', (TType.STRUCT, [MAttachment, None], False), None, ),  # 9
    (10, TType.LIST, 'Constraints', (TType.STRUCT, [MMIStandard.constraints.ttypes.MConstraint, None], False), None, ),  # 10
)
all_structs.append(MSceneUpdate)
MSceneUpdate.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'AddedSceneObjects', (TType.STRUCT, [MSceneObject, None], False), None, ),  # 1
    (2, TType.LIST, 'ChangedSceneObjects', (TType.STRUCT, [MSceneObjectUpdate, None], False), None, ),  # 2
    (3, TType.LIST, 'RemovedSceneObjects', (TType.STRING, 'UTF8', False), None, ),  # 3
    None,  # 4
    (5, TType.LIST, 'AddedAvatars', (TType.STRUCT, [MMIStandard.avatar.ttypes.MAvatar, None], False), None, ),  # 5
    (6, TType.LIST, 'ChangedAvatars', (TType.STRUCT, [MAvatarUpdate, None], False), None, ),  # 6
    (7, TType.LIST, 'RemovedAvatars', (TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(MAvatarUpdate)
MAvatarUpdate.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ID', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'PostureValues', [MMIStandard.avatar.ttypes.MAvatarPostureValues, None], None, ),  # 2
    (3, TType.LIST, 'SceneObjects', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.STRUCT, 'Description', [MMIStandard.avatar.ttypes.MAvatarDescription, None], None, ),  # 4
    (5, TType.LIST, 'Properties', (TType.STRUCT, [MPropertyUpdate, None], False), None, ),  # 5
)
fix_spec(all_structs)
del all_structs
