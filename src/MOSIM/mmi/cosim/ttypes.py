#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import MMIStandard.core.ttypes
import MMIStandard.avatar.ttypes
import MMIStandard.mmu.ttypes
import MMIStandard.services.ttypes

from thrift.transport import TTransport
all_structs = []


class MCoSimulationEvents(object):
    """
    Attributes:
     - Events
     - SimulationTime
     - FrameNumber

    """


    def __init__(self, Events=None, SimulationTime=None, FrameNumber=None,):
        self.Events = Events
        self.SimulationTime = SimulationTime
        self.FrameNumber = FrameNumber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.Events = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = MMIStandard.mmu.ttypes.MSimulationEvent()
                        _elem5.read(iprot)
                        self.Events.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.SimulationTime = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.FrameNumber = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MCoSimulationEvents')
        if self.Events is not None:
            oprot.writeFieldBegin('Events', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.Events))
            for iter6 in self.Events:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.SimulationTime is not None:
            oprot.writeFieldBegin('SimulationTime', TType.DOUBLE, 2)
            oprot.writeDouble(self.SimulationTime)
            oprot.writeFieldEnd()
        if self.FrameNumber is not None:
            oprot.writeFieldBegin('FrameNumber', TType.I32, 3)
            oprot.writeI32(self.FrameNumber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.Events is None:
            raise TProtocolException(message='Required field Events is unset!')
        if self.SimulationTime is None:
            raise TProtocolException(message='Required field SimulationTime is unset!')
        if self.FrameNumber is None:
            raise TProtocolException(message='Required field FrameNumber is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(MCoSimulationEvents)
MCoSimulationEvents.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'Events', (TType.STRUCT, [MMIStandard.mmu.ttypes.MSimulationEvent, None], False), None, ),  # 1
    (2, TType.DOUBLE, 'SimulationTime', None, None, ),  # 2
    (3, TType.I32, 'FrameNumber', None, None, ),  # 3
)
fix_spec(all_structs)
del all_structs
